Задание №2
* Что такое проект?
* Из каких этапов состоит Waterfall model/Каскадная модель?
* Какие преимущества и недостатки Waterfall model/Каскадной модели?
* Из каких этапов состоит V-model/V- модель?
* Когда использовать V-model/V- модель?
* Из каких этапов состоит Iterative model/Итеративная модель?
* Когда использовать Iterative model/Итеративной модели?
* Плюсы и минусы Iterative model/Итеративной модели?
* Agile - это?
* Agile манифест - это?
* Какие ценности Agile манифест?
* Основные принципы Agile манифест?
* Scrum - это? (опишите подробно)
* Преимущества и недостатки Scrum
* Что такое ретроспектива?
* Что такое Velocity / Capacity?
* Kanban- это? (опишите подробно)
* Преимущества и недостатки Kanban?
* Что такое SDLS? Из каких этапов состоит? Что происходит на каждом этапе?
* Что такое STLS? Из каких этапов состоит? Что происходит на каждом этапе?








Что такое проект
Проект в тестировании - это конкретная задача или набор задач, направленных на проверку качества ПО.  
Из каких этапов состоит Waterfall model/Каскадная модель


* Анализ требований: Этот этап включает взаимодействие с заказчиком для понимания того, что необходимо реализовать.
* Проектирование: Создание архитектуры системы и проектирование ее компонентов. Здесь разрабатываются как высокоуровневые, так и детализированные спецификации.
* Кодирование: На этом этапе разработчики пишут код, основываясь на проектной документации. Реализуются все функциональные компоненты системы.
* Тестирование: Проведение тестирования для выявления и исправления ошибок. На этом этапе проверяется соответствие реализованных функций их требованиям.
* Внедрение: Установка и настройка системы в рабочую среду́, а также обучение пользователей.
* Поддержка: Обеспечение технической поддержки и исправление ошибок в процессе эксплуатации системы, включая внесение изменений на основе отзывов пользователей.


Каждый из этих этапов должен быть завершен до перехода к следующему, и, как правило, водопадная модель менее гибкая, чем современные итеративные подходы.
Какие преимущества и недостатки Waterfall model/Каскадной модели


ПРЕИМУЩЕСТВА
* Простота: Линейная структура облегчает понимание процесса разработки. Каждый этап отчетливо обозначен.
* Четкие требования: Поскольку требования собираются в начале, это помогает избежать путаницы в дальнейших этапах.
* Документированность: Модель предполагает наличие обширной документации на каждом этапе, что облегчает управление проектом.
* Легкая оценка прогресса: Каждый этап завершен до перехода к следующему, что упрощает отслеживание статуса проекта.
* Подходит для небольших проектов: В некоторых случаях, особенно для малых и средних проектов, водопадная модель может быть достаточно эффективной.


НЕДОСТАТКИ
* Негибкость: Изменения на поздних стадиях разработки могут быть дорогими и сложными, так как они требуют возврата к предыдущим этапам.
* Риски неполных требований: Если вначале не удается определить все требования, это может привести к серьезным проблемам в будущем.
* Поздняя доставка: Тестирование происходит только после завершения кодирования, что может выявить ошибки и недочеты слишком поздно в процессе.
* Сложность в управлении изменениями: Если в процессе разработки появляются новые требования, их внедрение может вызвать значительные затруднения.
* Неэффективность для крупных проектов: Для проектов с высоким уровнем сложности и изменения требований водопадная модель может оказаться неэффективной.


С точки зрения же тестирования эта модель плоха тем, что тестирование в явном виде появляется здесь лишь с середины развития проекта, достигая своего максимума в самом конце.
Из каких этапов состоит V-model/V- модель


  

V-модель является логическим развитием водопадной. Упрощенно говоря, мы видим те же стадии, что и в водопадной модели, только нижняя половина “водопада” развернута вверх, образуя форму буквы “V”. В этой модели, как и в водопадной, каждая стадия начинается строго после окончания предыдущей. 
Горизонтальные линии на схеме модели показывают нам то, как каждый этап тестирования ПЛАНИРУЕТСЯ на соответствующем этапе разработки. Другими словами, каждой стадии «на спуске» мы думаем о том, что и как будет происходить на соответствующей стадии «на подъёме». Таким образом, можно сказать, что тестирование в этой модели появляется уже на самых ранних стадиях развития проекта.
Когда использовать V-model/V- модель


1. Если проекту требуются детально проработанные требования и не ожидается значительных изменений на протяжении жизненного цикла, V-модель будет идеальным выбором, обеспечивая стабильность и предсказуемость процесса
2. V-модель обеспечивает строгий контроль на каждом этапе разработки и тестирования, что делает её особенно полезной для проектов, где критически важны безопасность, надежность и соответствие строгим стандартам, где ошибки могут иметь серьезные последствия
3. Когда проект требует соблюдения специфических стандартов (например, ISO*, IEC*, FDA*), V-модель с её акцентом на документацию и соответствие требованиям обеспечивает необходимый уровень контроля
Из каких этапов состоит Iterative model/Итеративная модель?


Процесс разработки по Итеративной модели разбивается на циклы, которые могут повторяться несколько раз, пока не будет достигнут желаемый результат. Эти циклы, или итерации, содержат в себе следующие шаги:

Итерация - это время по окончанию которого получается готовый инкремент 


* Планирование: определение целей, задач и ресурсов для текущей итерации.
* Анализ: обзор требований к проекту и определение функциональности, которая должна быть реализована в текущей итерации. В результате анализа формулируются требования к системе и определяются ее границы.
* Проектирование: создание детальных планов, описывающих, как система будет реализована. На этом этапе происходит разработка архитектуры системы и ее компонентов.
* Реализация: реализация проекта в соответствии с дизайном, архитектурой и требованиями к системе. Здесь код пишется и тестируется, чтобы гарантировать, что он соответствует требованиям и функциональности, описанным в анализе и проектировании.
* Тестирование: проверка, что продукт соответствует требованиям качества и работает без ошибок. Тестирование производится на каждой итерации, и результаты помогают улучшить продукт на следующей итерации.
* Оценка: оценка качества продукта и процесса разработки. В процессе оценки производится анализ прошлых итераций, чтобы выявить общие проблемы и ошибки, и сделать выводы о том, что можно улучшить.
* Выводы: сбор и обработка результатов итерации и подготовка к следующей. В результате каждой итерации получаются данные, которые помогают определить, что было сделано правильно и что необходимо изменить на следующих этапах.


После завершения каждой итерации, полученные результаты обсуждаются со стейкхолдерами и на их основе определяются требования к следующей итерации. Каждая итерация дополняет функциональность системы, исходя из потребностей пользователя, что позволяет более точно определить требования и уменьшить риски ошибок и неправильных решений.
Когда использовать Iterative model/Итеративной модели?


* требования к проекту не определены полностью или изменяются в процессе разработки.
* Проект имеет длительный срок выполнения, и требуется предоставлять результаты заказчику на регулярной основе.
* Необходима быстрая реакция на обратную связь от заказчика, чтобы можно было изменить проект в соответствии с требованиями.
* Проект разбивается на несколько итераций, которые могут выполняться параллельно разными командами.
* Необходимо быстро начать разработку, не имея полного понимания всех требований и ограничений проекта.
* Разработка сложной системы, где каждая итерация позволяет уточнить требования и получить обратную связь.
* Эта модель хорошо подходит для проектов, которые могут быть разделены на небольшие части и технологии разработки, используемые в проекте, хорошо изучены и понятны. Она также хорошо работает в командах, где есть высокий уровень взаимодействия и коммуникации между членами команды и заказчиком.
Плюсы и минусы Iterative model/Итеративной модели?


ПРЕИМУЩЕСТВА 
* Гибкость - итеративный подход позволяет легко адаптироваться к изменениям в требованиях и условиях проекта. Если появляются новые требования, то они могут быть внесены в следующую итерацию. Также в любой момент можно внести изменения в процесс разработки, чтобы улучшить его эффективность.
* Контроль над рисками - итеративная модель позволяет контролировать риски на каждом этапе. Это возможно благодаря тому, что каждая итерация заканчивается тестированием и оценкой результатов. Если появляются проблемы, то они могут быть быстро устранены.
* Улучшение качества продукта - благодаря постоянному тестированию и оценке результатов каждой итерации, разработчики могут быстро исправлять ошибки и улучшать качество продукта. Также постоянное обсуждение результатов с заказчиком помогает более точно определить требования и улучшить продукт на следующих этапах.
* Более быстрая разработка - итеративная модель позволяет ускорить процесс разработки, благодаря тому, что каждая итерация фокусируется на определенной функциональности системы. Это позволяет разрабатывать продукт постепенно, что уменьшает риски ошибок и неправильных решений.
* Участие заказчика - итеративная модель разработки включает заказчика в процесс разработки. Заказчик может следить за прогрессом и давать обратную связь после каждой итерации. Это позволяет заказчику контролировать процесс и убедиться, что проект соответствует его требованиям.


НЕДОСТАТКИ 
* Сложность планирования - итеративная модель разработки может быть сложной для планирования. Это связано с тем, что каждая итерация является мини-проектом, который требует отдельного планирования и оценки. Если не выполнить правильное планирование, то проект может выйти за рамки бюджета и сроков.
* Высокие затраты - итеративная модель разработки может быть более затратной, чем другие модели разработки. Это связано с тем, что каждая итерация требует времени и ресурсов, чтобы разработать и протестировать функциональность. Если проект требует множества итераций, то общие затраты на проект могут значительно увеличиться.
* Необходимость участия заказчика - итеративная модель разработки требует активного участия заказчика в процессе разработки. Если заказчик не может уделять достаточно времени и внимания проекту, то он может не получить желаемый результат.
* Риск неправильного понимания требований - если требования заказчика не были поняты правильно на начальных этапах, то могут возникнуть проблемы на следующих итерациях. Это может привести к тому, что заказчик будет неудовлетворен результатами и потребуется больше времени и ресурсов на исправление ошибок.
* Не подходит для всех проектов - итеративная модель разработки может не подходить для всех проектов. Если проект имеет жесткие требования по срокам или бюджету, то Итеративная модель может быть неэффективной. Кроме того, для проектов, которые требуют определенной последовательности выполнения задач, может быть лучше использовать другие модели разработки.
Agile - это


Agile - философия управления проектами основанная на agile манифесте, принципах и ценностях.
это подход к управлению проектами, предполагающий разбивку проекта на этапы, а также непрерывное сотрудничество и совершенствование. В рамках этого подхода команды следуют циклу планирования, выполнения и оценки.
Agile манифест - это


Agile манифест - это ключевой документ, в котором перечислены фундаментальные идеи и положения методологии разработки программного обеспечения.
Какие ценности Agile манифест?


* Люди и взаимодействие     важнее      процессов и инструментов
* Работающий продукт     важнее      исчерпывающей документации
* Сотрудничество с заказчиком     важнее       согласования условий контракта
* Готовность к изменениям      важнее         следования первоначальному плану
Основные принципы Agile манифест?


* Удовлетворение клиента - удовлетворение клиента через раннюю и непрерывную поставку ценного программного обеспечения. Регулярная поставка позволяет клиенту оценивать продукт на каждом этапе и вносить изменения, что делает конечный результат более точным и полезным. 
* Приветствие изменений - приветствование изменений требований на любом этапе разработки, даже на поздних стадиях. гибкость в отношении изменений позволяет адаптироваться к изменяющимся условиям и требованиям рынка, что помогает создать более конкурентоспособный продукт.
* Частая поставка - поставляйте работающий продукт часто, с предпочтением к более короткому временному промежутку. Частые релизы позволяют получить обратную связь от клиентов, выявить и устранить возможные проблемы на ранних этапах, а также быстрее реагировать на изменения.
* Ежедневное сотрудничество - ежедневное взаимодействие между бизнесом и разработчиками. Регулярное общение помогает лучше понять потребности бизнеса, устранять возможные недоразумения и вырабатывать решения, которые отвечают текущим задачам.
* Мотивированные люди - стройте проекты вокруг мотивированных людей, дайте им нужные условия и поддержку, и доверьтесь им выполнить поставленную задачу. Успех проекта во многом зависит от мотивации команды. Создание условий для работы и доверие к команде способствует более продуктивной и качественной работе.
* Разговор вживую - наиболее эффективный способ передачи информации - это личная беседа. Личное общение позволяет быстро и точно передавать информацию, уменьшает риск недопонимания и ускоряет процесс принятия решений.
* Работающие ПО - работающее программное обеспечение — основной показатель прогресса. Конечная цель разработки — создание работающего продукта. Именно работающий продукт, а не документация или отчёты, показывает реальный прогресс проекта.
* Устойчивое развитие - гибкие процессы способствуют устойчивому развитию. Команды должны иметь возможность поддерживать постоянный темп неопределенно долго. Устойчивый темп работы помогает избежать выгорания команды и поддерживать высокое качество работы на протяжении всего проекта.
* Техническое совершенство - постоянное внимание к техническому совершенству и качеству проектирования усиливает гибкость.Фокус на высокие стандарты технического исполнения помогает команде создавать гибкий, легко изменяемый и поддерживаемый продукт.
* Простота - искусство максимизировать объем невыполненной работы — важнейший фактор. Фокус на минимизацию ненужной работы позволяет сосредоточиться на создании ценности и избегать затрат на нерелевантные задачи.
* Самоорганизация команд - лучшие архитектуры, требования и проектные решения рождаются в самоорганизующихся командах. Самоорганизация позволяет командам быстрее принимать решения, более эффективно распределять задачи и использовать весь потенциал каждого участника.
* Постоянное улучшение - на регулярных интервалах команда осмысливает, как стать более эффективной, и настраивает свое поведение. Регулярные ретроспективы помогают команде выявлять проблемы и находить пути их решения, что ведет к постоянному улучшению процессов и результатов.
Scrum - это


Scrum - это методика гибкого управления проектами, которая помогает командам структурировать свою работу и управлять ею с помощью набора ценностей, принципов и практик. Scrum строится на коллективном разуме людей, использующих его. Вместо того, чтобы предоставлять людям подробные инструкции, правила Scrum направляют их отношения и взаимодействия.

СТОЛПЫ:
* Transparency (прозрачность) - возникающий процесс и работа должны быть видны как тем, кто выполняет работу, так и тем, кто ее получает. В Scrum важные решения принимаются на основе воспринимаемого состояния трех формальных артефактов. Артефакты с низкой прозрачностью могут привести к решениям, которые уменьшают ценность и увеличивают риск. Прозрачность позволяет проводить проверку. Проверка без прозрачности вводит в заблуждение и является расточительной.
* Inspection (инспекция) - артефакты Scrum и прогресс в достижении согласованных целей должны часто и тщательно проверяться, чтобы обнаружить потенциально нежелательные отклонения или проблемы. Чтобы помочь с проверкой, Scrum предоставляет каденс в форме своих пяти событий. Инспекция позволяет адаптироваться. Инспекция без адаптации считается бессмысленной. События Scrum предназначены для провоцирования изменений.
* Adaptation (приспособление) - если какие-либо аспекты процесса отклоняются за пределы приемлемых пределов или если полученный продукт неприемлем, применяемый процесс или производимые материалы должны быть скорректированы. Корректировка должна быть сделана как можно скорее, чтобы минимизировать дальнейшее отклонение. Адаптация становится более сложной, когда вовлеченные люди не наделены полномочиями или не умеют управлять собой. От Scrum-команды ожидают адаптации в тот момент, когда она узнает что-то новое посредством проверки.


События SCRUM:
Sprint (спринт) - это фиксированные события длиной в один месяц или меньше для создания последовательности. Новый спринт начинается сразу после завершения предыдущего спринта.
Sprint Planning (планирование спринта) - планирование спринта инициирует спринт, планируя работу, которую необходимо выполнить для спринта. Этот итоговый план создается совместной работой всей команды Scrum.
Daily Scrum (ежедневный Scrum) - цель ежедневного Scrum-совещания — проверить прогресс в достижении цели спринта и при необходимости адаптировать бэклог спринта, скорректировав предстоящую запланированную работу.
Sprint Review - демо (обзор спринта) - целью обзора спринта является проверка результатов спринта и определение будущих адаптаций. Scrum-команда представляет результаты своей работы ключевым заинтересованным сторонам, и обсуждается прогресс в достижении цели продукта. Обсуждается готовый продукт с участием заказчика 
Sprint Retrospective (ретроспектива спринта) - целью ретроспективы спринта является планирование путей повышения качества и эффективности.
Груминг (бэклог спринта) - происходит перед началом спринта, планирование задач на следующий спринт (выкидываются старые, ненужные задачи, фичи, баги,


АРТЕФАКТЫ:
Product Backlog (бэклог продукта) - это возникающий, упорядоченный список того, что необходимо для улучшения продукта. Это единственный источник работы, выполняемой Scrum-командой. (фичи + все требования к продукту
Sprint Backlog (спринт бэклог) - это план, составленный разработчиками для разработчиков, краткосрочный план выполнения ряда заданий в рамках спринта.
Increment (приращение) - это конкретная ступенька к Цели продукта.



Преимущества и недостатки Scrum


ПРЕИМУЩЕСТВА
* Гибкость и адаптивность. SCRUM позволяет легче адаптировать проект к изменениям, чем при традиционном подходе. Дает возможность быстро вносить изменения, гибко реагируя на изменения на рынке или другие важные обстоятельства. Не слепо следовать плану и расписанию, а уметь приоритизировать задачи в зависимости от потребностей клиентов.
* Более быстрая доставка продукта. На каждом отдельном этапе выходит готовый к употреблению продукт и с каждым новым спринтом этот продукт меняется. Это позволяет быстро подстраиваться под изменения внешней среды. 
* Контроль и управление рисками. Регулярные обзоры спринтов и ретроспективы позволяют выявлять и устранять риски на ранних стадиях.
* Прозрачность и видимость - регулярные встречи, такие как ежедневные стендапы, обзоры спринтов и ретроспективы спринтов, способствуют эффективному сотрудничеству членов команды, владельца продукта и скрам-мастера и обеспечивают прозрачность работы команды. Личный вклад каждого участника команды очевиден на ежедневных Scrum-совещаниях. Кроме того, постоянные коммуникации между членами команды позволяют недостаток опыта или квалификации повысить за счет информации и помощи от коллег. 
* Улучшение качества продукта: - частое тестирование и обратная связь от пользователей помогают улучшать качество продукта на каждом этапе. Главный принцип Скрама — работа как можно более короткими итерациями (спринтами) с поставкой и сбором обратной связи от заказчика. Короткие спринты уменьшают потери в случае разработки не того или не так, как нужно клиенту. 


НЕДОСТАТКИ
* Scrum очень требователен к команде проекта - она должна быть небольшой (5-9 человек) и кроссфункциональной - то есть члены команды должны обладать более чем одной компетенцией, необходимой для реализации проекта. Например разработчик ПО должен обладать познаниями в тестировании и бизнес-аналитике. Уход любого члена команды может оказать существенное влияние на ход проекта. Кроме того, члены команды должны быть «командными игроками», активно брать на себя ответственность и уметь самоорганизовываться.Подобрать такую зрелую команду очень непросто! - может быть неподходящим для долгосрочного планирования:
* В Scrum сложнее проводить долгосрочное планирование по срокам и бюджету из-за ориентации на краткосрочные спринты. 
* Риски недостаточной документации поскольку акцент ставится на рабочий продукт, документация может быть менее детальной, что может усложнить поддержку и развитие проекта в будущем. Сюда  же можно отнести сложности при заключении договоров, так как Scrum метод, в принципе, не подразумевает наличие фиксированного бюджета и фиксированного технического задания, что затрудняет юридическое оформление такого рода договоренностей
* Scrum — инкрементальный подход (мост по Scrum не построить) - поставка продукта небольшими полезными заказчику инкрементами возможна не всегда. Есть проекты, где продукт нужен целиком, частично он или бесполезен (булочка вместо хот-дога) или невозможно постепенно наращивать функционал.
* Траты временного ресурса - ежедневные скрам-встречи и частые обзоры требуют значительных временных ресурсов. Издержки на «болтовню» могут составлять 10-30%.
Что такое ретроспектива


Ретроспектива - это специальная встреча, которая проводится по итогам одного или нескольких спринтов. На ней команда подводит итоги проделанной работы и рефлексирует о проведенном времени.


Участники:
* Product Owner - ответственный за бэклог продукта
* Scrum Master - управленец, помогает командеследовать процессам скрамам, обучает, помогает самоорганизовываться
* Development Team - команда разработчиков
* Заинтересованные стороны
Что такое Velocity / Capacity


Velocity - это величина, отражающая количество работы, которое Скрам-команда может выполнить за один Спринт (короткий регулярный цикл работы длиной не более четырех недель). 
Производительность Скрам-команды часто называют скоростью, поскольку это буквальный перевод Velocity —англоязычного термина из Scrum. 
Скорость (velocity) может помочь командам более точно планировать свои спринты – помогает командам понять, сколько Story Points (единица, с помощью которой можно оценить объем усилий и ресурсов, нужных для завершения задачи) они обычно могут выполнить за один спринт.
Capacity (дословно мощность, нагрузка; производительность) - отражает фактическую доступность команды для работы. Другими словами: это объем работы, который команда или разработчик может выполнить за определенный период времени с учетом имеющихся ресурсов.
Емкость относится к общему количеству часов, доступных команде, и не учитывает объем работы. В этом методе участники команды выбирают самую приоритетную Point Story и разбивают ее на более мелкие задачи. Каждой задаче дается предполагаемое количество часов, которое может быть размещено в емкости Scrum. Если какая-либо емкость остается, выбирается следующий приоритет, и задача добавляется в Спринт. Задача выбирается таким образом, чтобы вся емкость Scrum была заполнена и больше не осталось емкости.


ФАКТ Велосити - скорость, с которой команда выполняет эти задачи, сколько работы мы выполняЛИ за предыдущие спринты (в сторипоинтах и человекачасах) 
ПЛАН Капасити - сколько работы мы можем выполнить за спринт, планируем
Kanban- это


Kanban - это подход к управлению процессами разработки и производства, ориентированный на обеспечение гибкости и оптимизации рабочего процесса.


ОСНОВНЫЕ ПРИНЦИПЫ
* Визуализация рабочего процесса - использует доски Kanban (Kanban boards) и карточки для визуализации потока работы и текущего состояния задач. Это помогает команде лучше понимать процесс и идентифицировать узкие места.
* Ограничение количества работ в процессе (WIP*) - установление лимитов на количество задач, которые могут находиться на каждом этапе рабочего процесса одновременно. Это способствует снижению времени выполнения задач и уменьшению количества незавершенной работы.
* Управление потоком - сосредотачивается на оптимизации потока задач через систему, стараясь минимизировать простои и улучшить постоянный поток работы
* Явные правила - определение и документирование правил рабочего процесса помогает всем членам команды понимать, как должна выполняться работа и как управляются изменения.
* Использование обратной связи для постоянного улучшения - регулярные встречи для обзора процессов и производительности с целью выявления возможностей для улучшения.
* Улучшение сотрудничества - поощрение командной работы и сотрудничества для улучшения качества и эффективности процессов.
Преимущества и недостатки Kanban


ПРЕИМУЩЕСТВА


1. Визуализация работы. Использование доски Канбан позволяет командам легко видеть, какие задачи находятся в процессе выполнения, какие задачи ожидают выполнения, а какие задачи завершены. Такая визуализация помогает командам понять поток работы и выявить узкие места, которые затем можно устранить, чтобы улучшить выполнение задач.
2. Гибкость. Канбан — это гибкий метод, который не предписывает определенный набор практик или ролей. Это позволяет командам постоянно совершенствовать свои рабочие процессы и вносить изменения по мере необходимости, что может привести к более эффективному и результативному предоставлению ценности клиенту.
3. Ориентация на непрерывную постановку задач. Ориентация Канбан на непрерывное предоставление ценности означает, что команды могут работать над задачами по мере их поступления, а не ждать начала определенного спринта. Это может помочь обеспечить более быстрое и эффективное выполнение работы, а также более быстрое получение ценности клиентом.
4. Улучшенное сотрудничество. Использование визуальной доски и фокус на ограничении незавершенной работы может помочь командам более эффективно сотрудничать. Команды могут видеть, над какими задачами работают их коллеги, а это помогает сократить дублирование усилий и повысить общую эффективность.
      
НЕДОСТАТКИ


1. Отсутствие структуры. Хотя гибкость Канбан может быть сильной стороной, она может быть и слабой стороной. Командам может быть трудно работать эффективно без определенного набора практик и ролей, что может привести к путанице и неэффективности.
2. Отсутствие временных рамок. Канбан не устанавливает конкретную продолжительность времени для работы, и это может затруднить эффективное планирование и расстановку приоритетов. Командам может быть трудно определить, когда задача завершена, и это может привести к задержкам и отсутствию прогресса.
3. Ограниченное количество ретроспектив спринта. Одним из ключевых преимуществ Scrum является ретроспектива спринта, которая позволяет командам проанализировать свою работу и определить области для улучшения. В Kanban нет аналогичного процесса, и это может затруднить командам постоянное совершенствование рабочих процессов.
4. Отсутствие расстановки приоритетов. Канбан не устанавливает конкретные приоритеты для работы, и это может затруднить для команд определение того, какая работа должна быть выполнена в первую очередь. Командам может быть трудно определить, какая работа является наиболее важной, что может привести к задержкам и отсутствию прогресса.
Что такое SDLS? Из каких этапов состоит? Что происходит на каждом этапе?


SDLC - это процесс, направленный на создание и поддержание работоспособности, качества и надежности ПО.
SDLC - это процесс поэтапной разработки программного обеспечения в следующем порядке.
* жизненный цикл разработки


* Анализ и сбор требований (планирование)
* Дизайн и проектирование
* Разработка программного обеспечения
* Тестирование
* Развертывание
* Обслуживание и поддержка.
Что такое STLS? Из каких этапов состоит? Что происходит на каждом этапе?


STLS - это процесс тестирования, который включает в себя определенную последовательность шагов, чтобы гарантировать достижение целей в области качества. В процессе STLC каждое действие выполняется планомерно и систематически. Каждый этап имеет разные цели и результаты. У разных организаций разные этапы STLC, однако основа остается прежней.
* жизненный цикл тестирование


STLC помогает убедиться в том, что разрабатываемое программное обеспечение работает правильно и соответствует заданным требованиям.


ЭТАПЫ
* Анализ требований (Requirement Analysis)
* Планирование тестирования (Test Planning)
* Разработка тест-кейсов (Test Case Development)
* Настройка тестового окружения (Test Environment Setup) 
* Выполнение тестирования (Test Execution)
* Завершение цикла тестирования (Test Cycle Closure)