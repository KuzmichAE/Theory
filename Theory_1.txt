Задание №1:
* Что такое тестирование ПО
* Цели тестирования ПО
* Что такое качество ПО
* Когда начинать и заканчивать тестирование ПО
* Принципы тестирования
* Quality assurance. Quality control. Tester
* Верификация. Валидация
* Характеристики качества ПО и их атрибуты
 







Что такое тестирование ПО
Тестирование ПО - процесс в рамках жизненного цикла разработки программного обеспечения, который оценивает качество компонента или системы, а также связанных с ними рабочих продуктов. (ISTQB)


Тестирование программного обеспечения – это процесс проверки и оценки программного продукта, на соответствие ожидаемого и фактического результата, с целью обнаружения ошибок, багов, отклонений от требований.
Цели тестирования ПО


* Обнаружение дефектов — выявление ошибок в программном обеспечении до того, как оно поступит к конечным пользователям.
* Проверка соответствия требованиям — подтверждение того, что продукт удовлетворяет как функциональные, так и нефункциональные требования.
* Оценка качества — оценка параметров, таких как производительность, безопасность, юзабилити и надёжность.
* Снижение рисков — минимизация рисков, связанных с возможными сбоями или неисправностями программного обеспечения.
* Обеспечение доверия к продукту — повышение уверенности в том, что продукт может быть выпущен на рынок.
Что такое качество ПО


Качество ПО - это степень соответствия продукта его функциональным и нефункциональным требованиям. Качество характеризует, насколько продукт удовлетворяет потребности пользователей, надёжен, удобен в использовании, безопасен, производителен и поддерживается в рабочем состоянии.
Как начинать и заканчивать тестирование


НАЧИНАТЬ - сразу же, как только это становится возможным. Один из 7 принципов тестирования (Раннее тестирование) гласит: Чем ранее делается тестирование – тем лучше. Это благотворно влияет на:
- стоимость 
- сроки
- качество разработки ПО


Критерии завершения:
* Закончились сроки, выделенные на тестирование (если на тестирование дается два дня, то по истечении этого срока тестирование заканчивается) 
* Исчерпан бюджет, выделенный на тестирование.
* На первом же испытании выявлено слишком много дефектов – нужна кардинальная переделка кода, продолжение тестирования не имеет смысла. 
* Все запланированные тест-кейсы выполнены, тестов больше нет;
* Достигнут целевой показатель тестового покрытия (% проверки кода или требований), дополнительные ресурсы на тестирование решили не выделять;
* Анализ результатов показал, что все существенные риски обнаружены и описаны, новых критических багов не прогнозируется;
* Затраты на поиск дефекта превышают возможные потери от самого дефекта
* Найти каждый последующий баг становится дороже.


Данный критерий подходит не для всех. Например, в медицине, строительстве, военной отрасли и других областях, от результатов которых зависит жизнь и безопасность данный критерий не должен быть основным.
Принципы тестирования


* Тестирование демонстрирует наличие дефектов. Тестирование только снижает вероятность наличия дефектов, которые находятся в ПО, но не гарантирует их отсутствия. Тестирование не может доказать, что программа не содержит ошибок. Оно может лишь показать наличие дефектов в системе. Даже если тесты не выявили багов, это не означает, что их нет.
* Исчерпывающее тестирование невозможно. Полное тестирование с использованием всех входных комбинаций данных, результатов и предусловий физически невыполнимо. Невозможно прописать и пройти все тестовые случаи 
* Раннее тестирование. Следует начинать тестирование на ранних стадиях жизненного цикла разработки ПО, чтобы найти дефекты как можно раньше.
* Скопление дефектов. Большая часть дефектов находится в ограниченном количестве модулей. Принцип Парето - в 20% процентах кода находится 80% ошибок
* Эффект (парадокс) пестицида. Если повторять те же тестовые сценарии снова и снова, в какой-то момент этот набор тестов перестанет выявлять новые дефекты.  Суть его в том, что если вы долго проводите одни и те же проверки, скорее всего новых багов вы не найдете. Именно поэтому периодически нужно «встряхивать» тестовую базу, ревьюить её новыми сотрудниками, проводить исследовательское тестирование.
* Тестирование зависит от контекста. Например, программное обеспечение, в котором критически важна безопасность, тестируется иначе, чем новостной портал.
* Заблуждение об отсутствии ошибок. Отсутствие найденных дефектов при тестировании не всегда означает готовность продукта к релизу. Система должна быть удобна пользователю в использовании и удовлетворять его ожиданиям и потребностям.


Quality assurance. Quality control. Tester


* Quality Assurance (QA) менеджеры – QA обеспечивает правильность процесса тестирования, подходит к контролю качества глобально, следит за нормализацией процессов.
* Quality Control (QC) лиды  – QC предполагает контроль соблюдения требований.
* Testing – Тестировщик обеспечивает сбор данных, которые вносятся в документы, созданные в ходе работы QC


Что такое верификация и валидация 


ВЕРИФИКАЦИЯ – делаем ли мы продукт правильно?  процесс оценки системы или её компонентов с целью определения удовлетворяют ли результаты текущего этапа разработки сформированным в начале этапа условиям (без запуска кода) 
* ревью документации 
* ревью кода без запуска 
* анализ требований 
ВАЛИДАЦИЯ – делаем ли мы правильный продукт? проверка соответствия ПО требованиям пользователя. Программа может на 100 % соответствовать спецификации, но при этом выполнять совершенно не то, что хотел пользователь/заказчик. (с запуском кода)


ПРИМЕР. Релиз – ОСЁЛ. Заказчик по ТЗ хотел: непарнокопытное животное с  седлом, 4 ногами и умеющее скакать. Верификация пройдена. Валидация –  нет. Заказчик хотел коня.


Что такое качество ПО
 
  



ФУНКЦИОНАЛЬНОСТЬ - ПО признаётся функциональным, если выполняет возложенные на него задачи, отвечает заданным потребностям пользователей. Данный аспект предполагает правильную и точную работу, совместимость всех входящих в состав компонентов. 


* Корректность (Correctness): Этот атрибут означает, насколько правильно программа выполняет заданные функции. Например, если программе поручено сортировать данные, корректность подразумевает, что она сортирует их правильно. 
* Полнота (Completeness): Полнота означает способность программы предоставлять все функции, заявленные в требованиях. Это означает, что программа не должна иметь недостающих функций. В нашем случае.


НАДЕЖНОСТЬ - это Способность ПО выполнять требуемые задачи в обозначенных условиях на протяжении заданного промежутка времени или указанное количество операций. 


* Доступность (Availability): Этот атрибут измеряет время, в течение которого система доступна для использования. Надежная система должна иметь высокую доступность, чтобы минимизировать простои.
* Отказоустойчивость (Fault Tolerance): Отказоустойчивость оценивает способность программы работать надежно, даже если возникают сбои или ошибки. Надежные программы могут продолжать функционировать, даже если произошел сбой.
* Устойчивость (Resilience): Этот атрибут связан со способностью программы восстанавливаться после сбоев и неполадок. Восстановление может включать в себя восстановление данных или переключение на резервные ресурсы.
* Предсказуемость (Predictability): Надежная система должна предсказуемо вести себя в различных ситуациях, что важно для пользователей и операторов системы.


УДОБСТВО ИСПОЛЬЗОВАНИЯ - данная степень измеряется со стороны простоты использования программы обычным пользователем. ПО должно обладать интуитивно понятным интерфейсом и удобством использования. Клиент должен за очень короткое время научиться им пользоваться


* Понимаемость (Understandability): Понимаемость оценивает, насколько легко пользователи могут понять, как использовать программу. Простой и понятный интерфейс повышает удобство использования. 
* Простота обучения (Learnability): Этот атрибут связан с легкостью освоения программы новыми пользователями. Чем быстрее пользователи могут освоить программу, тем лучше. 
* Ориентация на пользователя (User-Centered Design): Удовлетворение потребностей и ожиданий пользователей является ключевой составляющей удобства использования. 


ЭФФЕКТИВНОСТЬ - параметру соответствует степень обеспечения продуктом необходимой производительности при заданных условиях. Это способность программного обеспечения использовать системные ресурсы наиболее эффективным и рациональным образом. 


* Эффективность использования ресурсов (Resource Utilization): Этот атрибут оценивает, насколько эффективно программа использует ресурсы, такие как память, процессорное время и сетевая пропускная способность. Высокая эффективность обеспечивает оптимальное использование ресурсов.
* Время отклика (Response Time): Время отклика измеряет, сколько времени требуется программе для реагирования на запросы пользователя. Снижение времени отклика повышает удовлетворенность пользователей.
* Пропускная способность (Throughput): Пропускная способность определяет, сколько операций программа может обработать за единицу времени. Высокая пропускная способность важна для приложений с большой нагрузкой.
* Соответствие стандартам производительности (efficiency compliance) - Например соответствие стандартам энергоэффективности, таким как Energy Star


УДОБСТВО СОПРОВОЖДЕНИЯ - легкость, с которой ПО может изменяться для исправления дефектов, для реализации новых требований, для облегчения дальнейшего обслуживания и адаптации к имеющемуся окружению.


* Модульность (Modularity): Модульность оценивает способность программы быть разбитой на отдельные модули, что облегчает сопровождение и поддержку. Модульные системы позволяют быстрее вносить изменения и устранять ошибки.
* Изменяемость (Changeability): Изменяемость определяет, насколько легко программа может подвергаться изменениям без существенных нарушений работы. Поддерживаемость связана с управлением изменениями в программе.
* Документация (Documentation): Наличие подробной и актуальной документации для пользователей и разработчиков оказывает значительное влияние на поддерживаемость и сопровождаемость программы.


ПОРТАТИВНОСТЬ - если говорить про портативность (Portability), то она  характеризует ПО с точки зрения легкости его переноса из одного окружения (software/ hardware) в другое


* Удобство установки (convenience of installation): определяет, насколько легко и быстро программа может быть установлена на оборудование с различными характеристиками.
* Заменяемость (replaceability):  относится к способности одной системы заменить другую систему с тем же назначением в том же окружении. Это может включать в себя замену одного или нескольких компонентов программы внутри программной системы.


СОВМЕСТИМОСТЬ - это способность программного продукта функционировать корректно в различных окружениях, взаимодействовать с другими системами и приложениями, а также поддерживать различные стандарты и форматы данных. 


* Совместимость с аппаратным обеспечением (Hardware Compatibility) - Способность ПО корректно функционировать на различных типах аппаратного обеспечения.
* Совместимость с другими программами (Software Interoperability) - Способность ПО взаимодействовать с другими программными продуктами, включая ПО от других производителей.
* Совместимость с операционными системами (OS Compatibility) - Способность ПО работать на различных операционных системах без потери функциональности.




БЕЗОПАСНОСТЬ - это комплекс мер, процессов и технологий, направленных на защиту программного обеспечения от угроз, уязвимостей и несанкционированного доступа


* Конфиденциальность (Confidentiality): Этот атрибут оценивает способность программы защищать конфиденциальные данные от несанкционированного доступа. То есть, информация должна быть доступна только тем пользователям, которым разрешено ее видеть.
* Целостность (Integrity): Способность программы обеспечивать целостность данных и защищать их от несанкционированных изменений, также гарантирует, что данные не могут быть изменены или повреждены без обнаружения
* Доступность (Availability): Этот атрибут обеспечивает, чтобы система и данные были доступны авторизованным пользователям в любое время, определяет способность программы оставаться доступной даже при атаках или сбоях