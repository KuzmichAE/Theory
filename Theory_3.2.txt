Задание №3.2
* Что такое тестирование безопасности?
* Перечислите Принципы безопасности программного обеспечения
* Перечислите виды уязвимостей в безопасности программного обеспечения
* Что такое Тестирование на отказ и восстановления Failover and Recovery Testing?
* Что такое тестирование Эффективности использования ресурсов?
* Что такое тестирование Масштабируемости (Scalability testing)?
* Что такое тестирование Производительности (Performance testing)/Load testing/Stress testing/Volume testing?
* Что такое тестирование Надежности(Reliability Testing)?
* Что такое тестирование Стабильности (Stability Testing)?
* Что такое тестирование Удобства использования(Usability testing)?
* Что такое тестирование Pixel Perfect? Какие инструментами можно пользоваться при тестировании Pixel Perfect?
* Что такое тестирование Локализации// Совместимости/ Адаптивности?
* Что такое тестирование установки (Installation Testing)?
* Что такое ETL-тестирование/Тестирование перед миграцией (Pre-Migration testing)/Миграционное тестирование (Migration testing)/Тестирование после миграции (Post-Migration testing)?








Что такое тестирование безопасности?


Тестирование с целью оценить защищенность программного продукта. (ISTQB) тип тестирования ПО, который выявляет уязвимости, угрозы и риски. Целью тестов безопасности является выявление всех возможных лазеек и слабых мест в ПО, которые могут привести к потере информации, доходов, репутации компании, сотрудников или клиентов.

обеспечение безопасности данных пользователя 
- тестирование того, насколько система устойчива к каким-либо инъекциям, атакам, выяявление слабых мест нашиего 
Перечислите Принципы безопасности программного обеспечения


* Конфиденциальность означает, что конфиденциальная информация должна быть защищена от несанкционированного доступа. Этот принцип обеспечивает защиту личных данных, коммерческой информации, государственных секретов и других конфиденциальных данных от несанкционированного доступа.
* Целостность означает, что данные должны быть защищены от изменения несанкционированными лицами. Этот принцип гарантирует, что информация, которая передается и хранится, не будет изменена, повреждена или уничтожена.
* Доступность означает, что информация должна быть доступна только тем, кто имеет на это право. Этот принцип гарантирует, что информация доступна и используется только теми, кто имеет право на ее использование, и что она не будет заблокирована или недоступна из-за непредвиденных событий или действий злоумышленников.
* Аутентификация и авторизация пользователей — это процессы, которые используются для определения легитимности пользователей и предоставления им прав доступа к системе.
* Шифрование данных — это процесс преобразования данных в неразборчивый вид, чтобы они не могли быть прочитаны или использованы злоумышленниками.


Перечислите виды уязвимостей в безопасности программного обеспечения


* Инъекции — это уязвимости, связанные с возможностью внедрения зловредного кода в приложение через входные данные, такие как поля форм, URL-адреса, файлы и т.д. Наиболее распространенные типы инъекций: SQL-инъекции, XSS-атаки, инъекции операционной системы и командной строки.
* Недостаточная авторизация и аутентификация — это уязвимости, связанные с отсутствием или недостаточной проверкой подлинности пользователей, что может привести к несанкционированному доступу к системе, краже учетных данных и т.д.
* Утечки информации — это уязвимости, связанные с некорректным хранением или передачей конфиденциальной информации. Это может привести к несанкционированному доступу к конфиденциальным данным, включая пароли, логины, персональные данные. Тут может быть задействована, в том числе, социальная инженерия.
* Недостатки в защите приложения — это уязвимости, связанные с недостаточной защитой приложения от внешних атак, таких как DDoS-атаки, переполнение буфера, уязвимости в системе контроля доступа и т.д.
* Уязвимости в софте третьих сторон — это уязвимости, связанные с использованием приложением стороннего кода, который может содержать уязвимости, такие как небезопасные библиотеки и фреймворки, открытые порты, уязвимости в настройках и т.д.
Что такое Тестирование на отказ и восстановления (Failover and Recovery Testing)?


Тестирование отказоустойчивости (failover testing): Тестирование при помощи эмуляции отказов системы или реально вызываемых отказов в управляемом окружении. После вызванного отказа проверяется механизм отказоустойчивости с целью удостовериться, что данные не потеряны или не испорчены, и достигнут оговоренный уровень обслуживания (например, доступности функций или время отклика) (ISTQB).


Тестирование на отказ и восстановление (Failover and Recovery testing, Disaster Recovery Testing) - способность системы противостоять и успешно восстанавливаться после возможных сбоев, возникших в связи с ошибками ПО, отказами оборудования или проблемами связи/сети. Failover - проверка систем восстановления (или дублирующих основной функционал систем), которые, в случае возникновения сбоев, обеспечат сохранность и целостность данных тестируемого продукта. Методика подобного тестирования заключается в симулировании различных условий сбоя, последующем изучении и оценке реакции защитных систем. В процессе подобных проверок выясняется, была ли достигнута требуемая степень восстановления системы после возникновения сбоя. В отличие от тестирования надежности (Reliability Testing), которое проводится, чтобы найти отказ в конкретной точке, где он происходит, Recovery Testing проводится для проверки того, насколько хорошо система восстанавливается после сбоя или аварии.


Для наглядности рассмотрим некоторые варианты подобного тестирования и общие методы их проведения. Объектом тестирования в большинстве случаев являются весьма вероятные эксплуатационные проблемы, такие как:


* Проблемы с сетью;
* Сбой питания;
* Внешний сервер недоступен (External server not reachable);
* Сервер не отвечает (Server not responding);
* Отсутствует файл dll;
* Перегрузка базы данных;
* Остановленные сервисы/службы;
* Физические условия;
* Внешнее устройство не отвечает;
* Потеря сигнала беспроводной сети;


Что такое тестирование Эффективности использования ресурсов?


Тестирование эффективности проверяет количество ресурсов, необходимых программе для выполнения определенной функции . 


В компаниях-разработчиках программного обеспечения этот термин используется для обозначения усилий, затраченных на разработку приложения, и для количественной оценки удовлетворенности пользователей.
Что такое тестирование Масштабируемости (Scalability testing)?


Тестирование масштабируемости проводится для определения способности приложения масштабироваться с точки зрения пользовательской нагрузки, количества транзакций, объема данных и т. д., то насколько системы  может справляться с возрастающей         нагрузкой 


Цель теста масштабируемости отличается от стрессового или нагрузочного тестирования. 


Идея тестирования масштабируемости заключается в том, чтобы определить, в какой момент приложение перестает масштабироваться, и определить причину этого
Например, компания ожидает шестикратного увеличения нагрузки на серверы в течение следующих двух месяцев. Им может потребоваться увеличить производительность сервера и сократить время обработки запроса, чтобы лучше обслуживать посетителей.


* Вертикальным называется масштабирование при котором для увеличения производительности в уже имеющееся оборудование добавляют новые процессоры, диски, память. Такой подход применяется в случаях, когда лимит производительности элементов инфраструктуры исчерпан.
* Горизонтальное масштабирование. Суть горизонтального масштабирования — в добавлении новых узлов в IT-инфраструктуру. Вместо того, чтобы увеличивать мощность отдельных компонентов узла, компания добавляет новые серверы. С каждым дополнительным узлом нагрузка перераспределяться между всеми узлами.
Что такое тестирование Производительности (Performance testing)/Load testing/Stress testing/Volume testing?


Тестирование производительности (performance testing)  - это вид нефункционального тестирования ПО, используемый для проверки скорости, времени отклика, стабильности, надежности, масштабируемости и использования ресурсов программного обеспечения при определенной рабочей нагрузке. Основная цель тестирования производительности - выявить и устранить узкие места производительности в продукте.


В зависимости от характеристик, которые нам нужно протестировать, тестирование производительности делится на типы:
* Нагрузочное тестирование (load testing, capacity testing)
* Тестирование стабильности (stability testing)
* Объемное тестирование (volume testing)
* Стрессовое тестирование (stress testing) 
* Конкурентное тестирование (concurrency testing)


Load testing (нагрузочное) — вид тестирования производительности, при котором исследуется способность ПО сохранять заданные показатели качества в соответствии с требованиями при нагрузке в допустимых пределах. Его цель: найти предельные значения производительности тестируемого ПО, при превышении которых его работа перестает быть стабильной.


При таком тестировании замеряется:
* время отклика системы
* скорость обработки запросов от пользователей (например, как быстро открываются и прогружаются страницы сайта, как быстро система выполняет расчеты, выдает результаты поиска и т. д.), 
* а также сколько ресурсов "съедает" система — сетевых, процессорных, памяти.


Стрессовое тестирование (stress testing)  — вид тестирования производительности, которое оценивает надежность и устойчивость ПО в условиях превышения пределов граничных значений рабочих нагрузок или же в состоянии ограниченных ресурсов, таких как память или доступ к серверу. 


Стресс-тестирование - это негативное тестирование, которое проводят чтобы определить поведение системы при сверхнагрузках, определить точку отказа системы (числовые показатели метрик), выяснить, показываются ли корректные ошибки при этом и не теряются ли данные. 


Если стресс-тестирование связано с внезапным увеличением, например, количества пользователей, оно будет известно как Тестирование пиков нагрузки (spike testing). Тестирование пиков оценивает, как система реагирует на внезапные скачки или колебания объема трафика. Он включает в себя быстрое увеличение и уменьшение нагрузки для моделирования реальных сценариев, таких как флэш-продажи или вирусный контент.


Volume testing —  тестирование поведения приложения/сайта при получении очень большого объема данных. Объемное тестирование проводится с увеличением не нагрузки и времени работы, а количества используемых данных, которые используются и хранятся в системе.  С помощью объемного тестирования можно изучить влияние большого объема данных на время отклика и поведение системы.


Цели объемного тестирования
● Определение «емкости» приложения
● Поиск ошибок
● Время отклика
● Предотвращение потерь данных
● Минимизация операционных затрат благодаря раннему обнаружению проблем
● Анализ производительности под разными нагрузками
Инструменты: HammerDB, DbFit, JDBCSlim


Что такое тестирование Надежности(Reliability Testing)?


Надежность = стабильность (reliability) —  это «вероятность безотказной работы программного обеспечения в течение определенного периода времени в определенной среде», т.е. это результат, к которому стремятся разработчики, способом достижения которого является устойчивость. 
Что такое тестирование Стабильности (Stability Testing)?


Тестирование износостойкости (endurance testing): Тип тестирования уровня производительности для определения того, может ли элемент тестирования постоянно выдерживать требуемую нагрузку в течение установленного периода времени. (ГОСТ 56920)


Тестирование на выносливость (Endurance Testing, оно же Stability Testing, Soak Testing, Longevity Testing) включает в себя тестирование системы со значительной нагрузкой в ​​течение длительного периода времени, чтобы выяснить, как система ведет себя при длительном использовании. То есть для обеспечения того, чтобы производительность и / или время отклика после некоторого длительного периода устойчивой активности были не хуже, чем в начале теста. В основном используется для проверки утечек памяти, времени отклика, правильности подключения и закрытия подключения к модулям (например, БД) и т.п. Обычно продолжительность испытания на выносливость составляет 6-8 часов; может отличаться в зависимости от вашего SLA / требований.






Что такое тестирование Удобства использования (Usability testing)?


Usability Testing – это процесс оценки, насколько легко и эффективно пользователи могут использовать продукт.


Цель: Повысить удобство использования и удовлетворенность пользователей продуктом.
Метрики: Простота освоения, производительность, запоминаемость, ошибки и эмоциональная реакция.
Почему важно: Хороший интерфейс увеличивает лояльность пользователей, снижает затраты на обучение и поддержку.


Что такое тестирование Pixel Perfect? Какие инструментами можно пользоваться при тестировании Pixel Perfect?


Pixel Perfect Testing – это метод тестирования, при котором проверяется, насколько точно макет сайта или приложения совпадает с дизайном на уровне пикселей.
Цель: Убедиться, что итоговая верстка полностью соответствует дизайнерскому макету.


Основные аспекты тестирования:
* Точное совпадение элементов интерфейса с дизайном (расстояния, размеры, цвета). Соответствие всех элементов (иконок, шрифтов, изображений) оригинальному макету.
Инструменты:
* PerfectPixel: расширение для браузера, позволяющее наложить макет дизайна поверх страницы для точного сравнения.
* Zeplin/Figma/Фотошоп: предоставляют точные спецификации для разработчиков и тестировщиков.


Пример: В интернет-магазине кнопка "Купить" должна быть строго на 20 пикселей выше текста, как указано в дизайне. Тестирование Pixel Perfect выявит отклонения от этого требования.


Что такое тестирование Локализации// Совместимости/ Адаптивности?


Тестирование адаптивности (Adaptability) - это процесс определения степени простоты или сложности переноса программного компонента или приложения на другую платформу. 


Цель этого теста - убедиться, что контент и функциональность сайта доступны и удобны для пользователей, независимо от того, с какого устройства они заходят. Например, можно проверить, как приложение работает на разных операционных системах, с разными браузерами или на разных устройствах.


Локализация (Localization) — это процесс адаптации программного обеспечения или контента к конкретному региону, языку или культуре.


Она включает несколько этапов:
* internationalization testing, i18n testing,  globalization testing) — тестирование, направленное на проверку готовности продукта к работе с использованием различных языков и  с учётом различных национальных и  культурных особенностей.
* Localization testing (Тестирование локализации) — тестирование, направленное на проверку корректности и качества адаптации продукта к использованию на том или  ином языке с учётом национальных и культурных особенностей.  
* In-context review (Контекстный обзор) - это процесс проверки локализованного контента в реальном контексте его использования. Цель — убедиться, что переводы и адаптация контента корректны и соответствуют контексту, в котором они будут использоваться пользователями.


Тестирование совместимости (compatibility testing) - вид нефункционального тестирования, направленное на проверку способности приложения корректной работы продукта в определенном окружении. 


Выделяют несколько типов тестов на совместимость:


* C операционными системами - тестируется, может ли ПО работать корректно на одной версии операционной системы или на нескольких — Windows, Linux, macOS и Android.
* С браузерами - этот тип тестирования проверяет, корректно ли функционирует ПО в различных веб-браузерах и их версиях: Google Chrome, Firefox, Safari, Internet Explorer (Edge) и другие.
* С устройствами - QA-специалист проверяет, правильно ли функционирует ПО на различных девайсах, таких как мобильные телефоны, планшеты, умные часы и настольные компьютеры.
* С сетями - этот тип проверки анализирует правильность работы программного приложения в распространённых сетях и подключениях, таких как FaceID, Bluetooth, Wi-Fi, 3G, 4G и 5G.
* С аппаратным обеспечением - проверяется, работает ли ПО без дефектов на различных типах аппаратного обеспечения, таких как процессоры, жёсткие диски, карты памяти и другие компоненты.
* Обратная совместимость - этот тип тестирования гарантирует, что последние версии ПО будут корректно работать с более старым программным или аппаратным обеспечением. Тест на обратную совместимость важен для обеспечения стабильной работы тех пользователей, которые используют устройства более старых версий.
* Прямая совместимость - эта форма тестирования направлена на установление совместимости с аналогичными или новейшими версиями ПО, установленными на устройствах пользователей. В зависимости от обновлений, ИТ-решение может стать несовместимым или недоступным с некоторыми устройствами, и прямое тестирование совместимости даёт возможность предвидеть такие риски.
Что такое тестирование установки (Installation Testing)?


Тестирование устанавливаемости (installability testing) - тип тестирования переносимости для оценки того, могут ли должным образом элемент тестирования или совокупность элементов тестирования быть установлены во всех указанных средах. (ГОСТ 56920)


Тестирование инсталляции (установки) направлено на проверку успешной установки, настройки, обновления и удаления ПО, как десктопного, так и мобильного.
Что такое ETL-тестирование/Тестирование перед миграцией (Pre-Migration testing)/Миграционное тестирование (Migration testing)/Тестирование после миграции (Post-Migration testing)?


ETL (Extract, Transform, Load) - это процесс, объединяющий три этапа: извлечение, преобразование и загрузка данных из одного источника в другой, т.е. процесс перемещения данных из одного места в другое, из одного формата в другой или из одного приложения в другое. Как правило, это результат внедрения новой системы или места хранения данных. Бизнес-драйвером обычно является миграция или консолидация приложений, при которых устаревшие системы заменяются или дополняются новыми приложениями, использующими тот же набор данных.


Миграция часто начинается, когда компании переходят от локальной инфраструктуры и приложений к облачным хранилищам и приложениям для оптимизации или преобразования своего бизнеса.


ETL-тестирование - это вид тестирования, выполняемый для гарантии того, что данные, перенесенные из исходной в целевую базу данных, являются точными и соответствуют действующим правилам преобразования. Миграция состоит из 7 этапов:


* Premigration planning: Оценить перемещаемые данные на предмет стабильности;
* Project initiation: Определить и проинструктировать ключевых лиц, принимающих решения;
* Landscape analysis: Создайте надежный процесс управления правилами качества данных и проинформируйте бизнес о целях проекта, включая отключение устаревших систем;
* Solution design: Определите, какие данные необходимо переместить, а также качество этих данных до и после перемещения.
* Build & test: Закодируйте логику миграции и протестируйте миграцию с копией рабочей среды.
* Execute & validate: Продемонстрируйте, что миграция соответствует требованиям и что перемещенные данные пригодны для использования в бизнесе.
* Decommission & monitor: Выключите и утилизируйте старые системы.


Тестирование перед миграцией (Pre-Migration testing)


Эта фаза тестирования игнорируется или не учитывается в более простых приложениях. Но когда необходимо мигрировать сложные приложения, необходимо выполнить действия перед миграцией. Вот действия, которые предпринимаются на этом этапе:


* Установите четкий объем данных - какие данные должны быть включены, какие данные должны быть исключены, какие данные требуют преобразования/конвертации и т. д.;
* Выполнение сопоставление данных (data mapping) между устаревшим и новым приложением - для каждого типа данных в устаревшем приложении сравните соответствующий тип в новом приложении, а затем сопоставьте их - Сопоставление более высокого уровня (Higher level mapping);
* Изучите схему данных нового приложения - имена полей, типы, минимальные и максимальные значения, длину, обязательные поля, проверки на уровне полей и т. д.;
* Изучите интерфейсы в новом приложении и их подключения. Данные, проходящие через интерфейс, должны быть надежно защищены и настроены;
* Подготовьте тестовые случаи, тестовые сценарии и используйте их для новых условий в новых приложениях;
* Выполните набор тестовых случаев с набором пользователей и сохраните результаты, журналы. То же самое необходимо проверить после того, как произошла миграция, чтобы убедиться, что устаревшие данные и функциональность не повреждены;
* Количество данных и записей должно быть четко записано, его необходимо проверить после миграции, чтобы доказать, что никакие данные не были потеряны.


Миграционное тестирование (Migration testing)


В идеале миграция начинается с резервного копирования данных на ленту, чтобы в любой момент можно было восстановить устаревшую систему. Все сценарии и шаги должны быть правильно задокументированы без какой-либо двусмысленности.


Запись фактического времени, затраченного на миграцию с момента начала миграции до успешного восстановления системы, является одним из тестовых случаев, которые необходимо выполнить, и, следовательно, «Время, необходимое для миграции системы», должно быть записано в final test report, который будет предоставлен как часть результатов миграционного тестирования, и эта информация будет полезна во время запуска в прод. Время простоя, записанное в тестовой среде, экстраполируется для расчета приблизительного времени простоя в работающей системе. Именно в устаревшей системе будет выполняться миграция.


Тестирование после миграции (Post-Migration testing)


После успешной миграции приложения вступает в действие тестирование после миграции. Здесь сквозное тестирование системы выполняется в тестовой среде. Тестировщики выполняют определенные тестовые наборы, тестовые сценарии, варианты использования с устаревшими данными, а также с новым набором данных. В дополнение к этому, есть определенные элементы, которые необходимо проверить в перенесенных средах: