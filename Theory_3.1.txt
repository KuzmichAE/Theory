Задание №3.1
* Что такое функциональное тестирование (Functional/Behavioral testing)?
* Что такое нефункциональное тестирование (Non-Functional testing)?
* Какие виды тестирования относятся к функциональному тестированию?
* Какие виды тестирования относятся к нефункциональному тестированию?
* Что такое Статическое/Динамическое тестирование?
* Что такое Черный/Серый/Белый ящик тестирования(White/Black/Grey Box testing)?
* Что такое Компонентное(Component or Unit Testing) /Интеграционное (Integration Testing)
* Системное (System Testing)/Приемочное тестирования (Acceptance Testing)?
* Что такое Позитивное/Негативное тестирование?
* Что такое Альфа (Alpha Testing)/Бета тестирование(Beta Testing)?
* Что такое Интуитивное/Исследовательское тестирование?
* Что такое Gorilla testing/ Monkey testing?
* Что такое Дымовые (Smoke)/Ре-тест (Re-test)/ Санити (Sanity)/Регрессионное (Regression) тестирование?
* Что такое Тестирование нового функционала/ Приемочное тестирование?
* Что такое Ручное/Автоматизированное/Полуавтоматизированное тестирование?
* На основании чего происходит разработка тестовых сценариев?
* Что такое Frontend / Backend?








Что такое функциональное тестирование (Functional/Behavioral testing)?


Функциональное тестирование (functional testing): Тестирование, основанное на анализе спецификации функциональности компонента или системы. (ISTQB) Функциональное тестирование выполняется чтобы убедиться, что каждая функция программного  приложения ведет себя так, как указано в документе с требованиями. Функциональное тестирование проверяет делает ли это приложение (сайт) то, что должен?


Функциональное тестирование сосредоточено на проверке:
* Ключевых функций
* А также правильности обработки ошибок (то есть, выдает ли система сообщения об ошибках при их возникновении)


Для функционального тестирования принято использовать две техники:
1. На основе функциональных требований, указанных в спецификации требований. При этом для тестирования создаются тестовые случаи (testcases), составление которых учитывает приоритетность функций ПО, которые необходимо покрыть тестами
2. На основе бизнес-процессов, которые должно обеспечить приложение. В этом случае, нас интересует не так работоспособность отдельных функций ПО, как корректность выполняемых операций, с точки зрения сценариев использования системы. Таким образом, тестирование в данном случае будет основываться на вариантах использования системы (usecases).


Для функционального тестирования можно выделить четыре основных уровня:


* Модульное тестирование (Unit testing) – чаще всего проводится разработчиками. Это уровень функционального тестирования, на котором тестируется определенный изолированный модуль в собственной среде. Никакие внешние факторы и взаимосвязь с другими модулями программного обеспечения на данном уровне  не учитываются.
* Интеграционное тестирование (Integration testing) – уровень тестирования, при котором проверяется, как отдельные компоненты могут взаимодействовать между собой. Без учета внешних факторов. 
* Системное тестирование (System testing) – уровень тестирования, где проверяется работоспособность программного обеспечения целиком. Можно сказать, что на этом уровне и проводится сравнение фактического поведения системы на соответствие с функциональными требованиями заказчика. 
* Приемочное тестирование (Acceptance testing) – завершающий уровень тестирования, который обычно проводится заказчиком, а также может проводиться конечным пользователем. 


Что такое нефункциональное тестирование (Non-Functional testing)?


Нефункциональное тестирование – это вид тестирования программного обеспечения, который проверяет нефункциональные аспекты продукта, такие как производительность, стабильность и удобство использования. Если функциональное тестирование проверяет, делает ли продукт то, что должен, то нефункциональное сосредоточено на том, насколько хорошо продукт работает.


Какие виды тестирования относятся к функциональному тестированию?


  



Какие виды тестирования относятся к нефункциональному тестированию?


  



Что такое Статическое/Динамическое тестирование?


Статическое тестирование — не требует выполнения кода; это его суть. При этом оно может быть ручным или автоматизированным (например автоматические чекеры синтаксиса). Статические тесты начинаются на ранних этапах цикла разработки. Такие тесты незаменимы при проверке MVP. Иногда даже не нужен компьютер — просто вручную проверяются самые базовые функции.
Этапы статического тестирования:


* Проверка требований и написание скриптов. Описываются все действия пользователей (включая вводы и выводы). Чем лучше детализированы use-кейсы, тем лучше — надежнее тест-кейсы.
* Верификация функциональных требований. Проверяется, что требования “покрывают” все важные элементы. Особое внимание уделяется базам данных, интерфейсу, далее требованиям по аппаратной и программной части, и сети.
* Оценка архитектуры. Оценка всех процессов на бизнес-уровне. Особое внимание — правильности локации серверов, также сетевые диаграммы, протоколы, балансировка нагрузки, доступность баз данных; затем оценка тестового окружения.
* Верификация прототипов, и, особо в последнее время, пропорций экрана в мобильных приложениях. Проверяются требования и use-кейсы.
* Валидация т.н. “field dictionary”. Каждое поле ввода в интерфейсе пользователя подробно описывается, и генерируются соответствующие тест-кейсы.


Динамическое тестирование подразумевает выполнение кода при тестировании. Проверяется поведение приложения и функции, оценивается как задействованы память и процессор, и в целом производительность. QA-команда убеждается, что софт работает в соответствии с use-кейсами, ориентированными на бизнес-цели.
Динамическое тестирование выполняет код при выполнении — и сверяет результаты с ожидаемыми. Такое тестирование могут проводить на любом этапе жизненного цикла, и оно может быть как по типу черного ящика, так и белого ящика.


Существуют три способа динамического тестирования. 
* Юнит-тестирование. Все модули тестируются QA-командой (хотя традиционно это задача разработчиков).
* Интеграционное тестирование. Оценка связности работы всех частей приложения.
* Системное тестирование. Тестируется вся система как целое — выполнены ли требования в спецификациях.




Что такое Черный/Серый/Белый ящик тестирования(White/Black/Grey Box testing)?


* Тестирование белого ящика
Главная цель этого процесса – проверка кода, тестирование как внутренней структуры, так и дизайна. Тестировщики могут видеть код на этой стадии, поэтому, этот метод имеет ряд других названий, таких как открытое тестирование или проверка кода. Каждый термин указывает на прозрачный процесс, как и возможность проверки процессов ввода-вывода, основываясь на внутренних алгоритмах работы.
Тестирование белого ящика предполагает поиск и улучшение следующих моментов:
* Нерабочих или неоптимизированных участков кода
* Потеря безопасности
* Рабочие процессы и сценарии ввода
* Условные процессы
* Неправильное функционирование объектов
* Некорректное отображения информации.
Подтверждение работоспособности системы приложения – цель тестирования белого ящика. Любое расхождение с ожидаемыми результатами может быть классифицировано как баг, нуждающийся в корректировке.


* Тестирование серого ящика
Тестирование серого ящика предусматривает частичную осведомленность о внутренних процессах. Данный метод - это комбинация двух предыдущих подходов (тестирования белого и черного ящиков). Специалист стремится найти все проблемы функционирования и ошибки в коде. На этой стадии тестировщик может реализовать сквозной тест.
Для запуска тестовых случаев во время тестирования серого ящика не обязателен доступ к коду. Каждый тест базируется на знании поведения программы. Это хороший подход к реализации функционального тестирования. Однако, это не будет успешным без реализации более глубоких методов, таких как тестирование белого и черного ящиков.


* Тестирование черного ящика
Во время поведенческого тестирования или тестирования черного ящика, специалист не знает наверняка, что за продукт он тестирует. Внутренняя структура, приложение и дизайн остаются неизвестными для тестировщика. Тесты, как правило, функциональны. Веб-страницы изучаются с использованием браузера, вводом некоторых данных и при анализе полученных данных.


Что такое Компонентное(Component or Unit Testing) /Интеграционное (Integration Testing)


Модульное тестирование (или Unit test) – базовый уровень “пирамиды”. Модульные тесты проводят для отдельно взятых элементов или подпрограмм в коде. Как правило, юнит-тесты проводятся непосредственно разработчиками, позволяя на самом начальном этапе определить ошибки кода, возможные дефекты алгоритмов.


Модульное тестирование используется для тестирования какого-либо одного логически выделенного и изолированного элемента системы в коде. Целью тестирования модуля является не демонстрация правильного функционирования модуля, а демонстрация наличия ошибки в модуле, а также в определении степени готовности системы к переходу на следующий уровень разработки и тестирования. На уровне модульного тестирования проще всего обнаружить дефекты, связанные с алгоритмическими ошибками и ошибками кодирования алгоритмов, типа работы с условиями и счетчиками циклов, а также с использованием локальных переменных и ресурсов. Ошибки, связанные с неверной трактовкой данных, некорректной реализацией интерфейсов, совместимостью, производительностью и т.п. обычно пропускаются на уровне модульного тестирования и выявляются на более поздних стадиях тестирования. 


Компонентное тестирование (или Component testing) – следующий более высокий уровень тестирования ІТ-продуктов. Он предполагает проведение тестирования для единиц (юнитов), объединенных в компоненты. При этом каждый из этих компонентов может тестироваться в индивидуальном порядке.


Компонентное тестирование занимает больше времени, чем модульное, поскольку компонент системы состоит из нескольких модулей. Хотя этот процесс может быть затратным по времени, он все равно необходим. Иногда отдельные модули работают исправно, но при их совместном использовании возникают проблемы.


Существует два вида компонентного тестирования: компонентное тестирование в малом и в целом.


* Тестирование компонентов in small
При тестировании компонентов “в малом” каждый компонент проверяется отдельно от остальных компонентов системы. Чтобы протестировать компонент, нужно использовать имитации и макеты других компонентов, с которыми он взаимодействует. Такой вид тестирования гарантирует, что компонент готов к интеграции с остальной частью системы.
* Тестирование компонентов in large
Компонентное тестирование “в широком плане” проводится без разделения, поэтому тестируемый компонент имеет доступ ко всем другим частям системы. При таком тестировании проверяется только главный компонент, а не связанные с ним модули или взаимодействие между ними.
* Чем отличается модульное тестирование от компонентного?
По сути, эти уровни тестирования весьма схожи между собой при единственном небольшом отличии – объеме исследуемых единиц. Т.е. компонентное тестирование дает возможность оценить уже готовые узлы и алгоритмы, а модульное – начальные единицы кода.
Интеграционное тестирование


Одним из этапов процесса обеспечения качества выступает интеграционное тестирование. Что такое интеграционное тестирование? Оно направлено на проверку взаимодействия между программными модулями для обеспечения их корректной совместной работы. 
 
Цель интеграционного тестирования
Главная цель интеграционного тестирования — подтвердить, что различные программные компоненты, модули и подсистемы работают вместе как единая система, обеспечивая требуемую функциональность и производительность.


* Интеграционное тестирование «большого взрыва»:
* Интеграционное тестирование сверху вниз:
* Интеграционное тестирование снизу вверх:я.
* Многослойное / гибридное интеграционное тестирование:
* Непрерывное интеграционное тестирование:


Системное (System Testing)/Приемочное тестирования (Acceptance Testing)?


Системное тестирование — это процесс проверки готового программного обеспечения, чтобы убедиться, что оно работает так, как задумано. Это финальная проверка перед тем, как программа попадет к пользователям.


Зачем нужно системное тестирование?
Проверка работы всей системы: Мы смотрим, как все части программы работают вместе. Иногда отдельные части могут работать хорошо, но в совокупности могут возникнуть проблемы


Приемочное тестирование (Acceptance Testing) - это завершающий этап тестирования, на котором проверяется соответствие разработанного продукта всем требованиям заказчика и его готовность к использованию. Цели:
* Подтвердить соответствие продукта требованиям заказчика
* Принять решение о готовности продукта к переходу в эксплуатацию или нет


end to end tests
Что такое Позитивное/Негативное тестирование?


Позитивное тестирование – это тестирование с применением сценариев, которые соответствуют нормальному (штатному, ожидаемому) поведению системы. С его помощью мы можем определить, что система делает то, для чего и была создана. 


Позитивное тестирование — это подход, при котором проверяются функциональные возможности системы на правильность работы в условиях корректного использования. Создание позитивных тест-кейсов является важным этапом при разработке и тестировании программного обеспечения. Он позволяет проверить работу системы в условиях правильного использования и предотвратить возможные ошибки, которые могут возникнуть при ее эксплуатации.


Особенности:
* Цель: Демонстрация того, что продукт работает по назначению и выполнен согласно требованиям и спецификациям.
* Входные данные: Используются только валидные и корректно оформленные данные, которые ожидаются в реальной эксплуатации системы.
* Результаты: Ожидается, что система успешно обработает данные и выполнит соответствующие функции без ошибок.


Эта методика является важной частью процесса тестирования, поскольку она направлена на подтверждение основного функционала и удобства использования продукта. Однако для полного тестового покрытия позитивное тестирование должно дополняться негативным тестированием, которое проверяет поведение системы при вводе некорректных данных или выполнении нестандартных действий пользователем.


Негативным называют тестирование, в рамках которого применяются сценарии, которые соответствуют внештатному поведению тестируемой системы. Это могут быть исключительные ситуации или неверные данные.
Надежность приложения может быть оценена только с помощью эффективно разработанных негативных сценариев. Негативное тестирование выявляет потенциальные дефекты в приложении, которые могут серьезно повлиять на использование продукта в целом. Также такое тестирование может быть полезным для определения условий, при которых приложение может дать сбой.


Основные аспекты:
Обработка невалидных данных: Проверка реакции системы на ввод данных, выходящих за пределы ожидаемых значений, форматов или диапазонов.
Тестирование граничных условий: Включает в себя ввод значений на границе или вне допустимых пределов для выявления потенциальных проблем в обработке краевых случаев.
Проверка обработки исключений: Оценка способности системы корректно обрабатывать ошибочные ситуации, например, отсутствие необходимых файлов, ошибки доступа к ресурсам и т. д.
Тестирование на переполнение: Ввод слишком больших значений или объемов данных для проверки устойчивости системы к переполнениям и утечкам памяти.
Использование неподдерживаемых операций: Попытки выполнения действий, которые не должны быть доступны или разрешены в текущем контексте работы приложения.


Что такое Альфа (Alpha Testing)/Бета тестирование(Beta Testing)?


Альфа-тестирование является разновидностью приемочных испытаний; выполняется для выявления всех возможных проблем и ошибок перед выпуском конечного продукта конечным пользователям. Альфа-тестирование проводят тестировщики, являющиеся внутренними сотрудниками организации. Основная цель — определить задачи, которые может выполнять типичный пользователь, и протестировать их.


Основная цель альфа-тестирования — симулировать реальных пользователей с помощью черного цвета. box и белый box (pin drop).


Бета-тестирование выполняется «реальными пользователями» программного приложения в «реальной среде» и может рассматриваться как форма внешнего Пользователь приемочных испытаний. Это заключительное испытание перед отправкой продукта клиентам. Прямая обратная связь от клиентов — главное преимущество бета-тестирования. Это тестирование помогает тестировать продукты в среде клиента.


Бета-версия программного обеспечения предоставляется ограниченному числу конечных пользователей продукта для получения отзывов о качестве продукта. Бета-тестирование снижает риски сбоев продукта и обеспечивает повышение качества продукта за счет проверки заказчиком.




	Альфа
	Бета
	Где?
	Внутри компании, на мощностях компании разработчика 
	Вне компании, на собственных мощностях тестирующих 
	Кем?
	не командой самого разработчика, а потенциальными или существующими клиентами и/или операторами или независимой группой тестирования
	потенциальными или существующими клиентами и/или операторами
	Среда (environment)
	Разработческая среда (Development Environment): Первоначальное тестирование может проводиться в среде разработки, где код разрабатывается и запускается.
Тестовая среда (Testing/Staging Environment): Более продвинутое альфа-тестирование обычно проводится в изолированной тестовой среде, которая имитирует реальную рабочую среду, но с ограниченным набором данных и конфигураций.
	Предпродажная среда (Pre-production Environment): распространяется через специальный канал, например, бета-магазин приложений или через систему раннего доступа. Эта среда практически идентична реальной производственной среде.
Реальная среда (Production Environment): В некоторых случаях бета-версии могут быть доступны в реальной производственной среде, но с пометкой "бета", чтобы пользователи понимали, что это не окончательная версия.
	Устройства
	Внутренние устройства разработчиков: Это могут быть компьютеры, виртуальные машины или тестовые серверы, используемые непосредственно разработчиками и внутренними тестировщиками.
Тестовые устройства: В некоторых случаях компании используют специальные тестовые устройства или эмуляторы, чтобы проверить работу приложения на различных конфигурациях и платформах (например, разные версии операционных систем, разрешения экрана и т.д.).
	Устройства пользователей: Бета-тестирование проводится на реальных устройствах пользователей, которые согласились участвовать в тестировании. Это могут быть смартфоны, планшеты, компьютеры, игровые консоли и другие устройства, которые соответствуют требованиям приложения.
Разнообразные платформы и конфигурации: Важно, чтобы бета-тестирование охватывало широкий спектр устройств и конфигураций, чтобы выявить проблемы, которые могут возникнуть у различных пользователей.


	Главные задачи
	1. Проверка функциональности и стабильности приложения.
2. Поиск критических багов.
3. Проверка интеграции разных модулей приложения.


	1. Проверка работы приложения в реальных условиях.
2. Оценка пользовательского опыта.
3. Выявление ошибок, которые не были найдены на стадии альфа-тестирования.
4. Сбор отзывов от пользователей для возможных улучшений перед окончательным релизом.


	

Что такое Интуитивное/Исследовательское тестирование?


Интуитивное тестирование 


Свободное тестирование (ad hoc testing): Тестирование, выполняемое неформально; без формальной подготовки тестов, формальных методов проектирования тестов, определения ожидаемых результатов и руководства по выполнению тестирования. (ISTQB).
Чаще всего такое тестирование выполняется, когда владелец продукта не обладает конкретными целями, проектной документацией и ранее поставленными задачами. При этом тестировщик полагается на свое общее представление о продукте, сравнение с похожими продуктами, собственный опыт. 


Преимущества ad-hoc тестирования
Основное преимущество ad-hoc тестирования — возможность выявить баги, которые остались бы незамеченными при других проверках. А поскольку для такого тестирования не нужно ничего планировать и структурировать, оно экономит много времени.
Дополнительный плюс ad-hoc тестирования — тестировщик проводит его в свободной форме, согласно своему пониманию системы. Он может добавлять различные проверки уже по ходу работы, что помогает выявлять ошибки.
Такое тестирование могут проводить и сами разработчики ПО.


Недостатки ad-hoc тестирования
Основной недостаток ad-hoc тестирования состоит в том, что сам процесс тестирования не документируется, поскольку идет не по конкретному набору тест-кейсов. В результате воспроизвести замеченную ошибку сложнее. Для этого тестировщику приходится вспоминать, какие шаги привели его к нужной точке.
Кроме того, если у тестировщика нет предварительных знаний о функционале тестируемого приложения, ad-hoc тестирование будет бесполезным, оно не выявит никаких ошибок.


🔻Виды Ad hoc тестирования:


* buddy testing (совместное тестирование) — когда 2 человека, как правило, разработчик + тестировщик, работают параллельно и находят дефекты в одном и том же модуле. Такой вид тестирования помогает тестировщику выполнять необходимые проверки, а программисту фиксить баги на ранних этапах.
* pair testing (парное тестирование) — когда 2 тестировщика проверяют один модуль и помогают друг другу. К примеру один может искать дефекты, а второй их документировать. Таким образом у одного тестера будет функция, скажем так, обнаружителя, у другого — описателя
* Monkey testing - произвольное тестирование продукта с целью как можно быстрее, используя различные вариации входных данных, нарушить работу программы или вызвать ее остановку (простыми словами - сломать);
* MonKey testing  похоже на Ad hoc Testing. Это также проводится случайным образом, без какого-либо планирования или подготовки. По этой причине многие программисты относят Monkey Testing к типу Adhoc Testing. Однако Monkey Testing отличается от Adhoc Testing одним существенным образом, Monkey Testing можно проводить без каких-либо знаний или информации о программном обеспечении.


Exploratory Testing


Исследовательское Тестирование - одновременно является и техникой, и видом тестирования. Exploratory testing подразумевает под собой одновременно изучение проекта, функционала, тест-дизайн в уме и тут же исполнение тестов, после чего данный цикл может повторяться необходимое количество раз, каждый раз улучшая создаваемые кейсы и документируя пройденные сессии. Подход к тестированию, при котором тестировщики одновременно изучают приложение, проектируют и выполняют тесты. 


Особенности:
1. Тестирование основано на постоянном обучении. Тестировщик начинает с ограниченного понимания системы и расширяет свои знания в процессе тестирования.
2. Тестовые сценарии разрабатываются в процессе тестирования, что делает исследовательское тестирование гибким и адаптивным.
3. Подход особенно эффективен для выявления сложных и неочевидных ошибок.


Преимущества:
1. Повышает качество тестирования за счёт использования творческого подхода и аналитических способностей тестировщика.
2. Позволяет быстро адаптироваться к изменениям в приложении и требованиям.


Отличия:
1. Структурированность: В отличие от Ad Hoc Testing, исследовательское тестирование требует, чтобы тестировщик активно использовал свои знания для проектирования тестов во время самого тестирования, делая процесс более организованным.
2. Целенаправленность: Исследовательское тестирование направлено на активное обучение и понимание системы, в то время как Ad Hoc Testing может быть более случайным и спонтанным.
3. Документация: Исследовательское тестирование часто включает в себя создание кратких заметок о проведённых тестах и обнаруженных ошибках для последующего анализа и улучшения процесса тестирования, тогда как в Ad Hoc Testing документация может отсутствовать.
Что такое Gorilla testing/ Monkey testing?


Monkey testing – это метод тестирования при разработке программного обеспечения, при котором QA инженер предоставляет приложению случайные входные данные без использования каких-либо тестовых примеров, которые могут привести к сбою системы. Этот метод применяется ко всей системе и используется для обнаружения ошибок, которые трудно обнаружить традиционными методами тестирования.


Преимущества Monkey Testing
* Отсутствуют заранее определенные тест-кейсы, все входные данные случайны.
* Это автоматизированное тестирование с возможностью интеграции с популярными инструментами.
* Не требует планирования или подготовки.
* Тестировщику, выполняющему это тестирование, не нужно обладать полным знанием всех деталей приложения.
* Требует меньше времени и усилий.
* Используется для проверки надежности и производительности системы.


Gorilla Testing похоже на Monkey Testing, но в первом методе тестируются отдельные модули, в то время как при втором методе проверяется вся система в целом. Выбирается каждый модуль продукта, и в него случайным образом подаются действительные и недействительные входные данные до тех пор, пока модуль не выйдет из строя. Это скрупулезный ручной тест для проверки надежности приложения.


Основные преимущества Gorilla Testing:
* В нем используются случайные входные данные и тесты.
* Это тщательный повторяющийся процесс ручного тестирования.
* Не требует заранее определенных тестовых случаев.
* Используется для проверки надежности модуля.
* Он специфичен для конкретного модуля и неукоснительно тестирует каждый модуль перед переходом к следующему.
* Для тестирования модуля требуется определенная подготовка.


Monkey Testing vs Gorilla Testing: Использование
Monkey Testing используется для проверки производительности приложения. Оно подходит для нагрузочного тестирования ПО путем предоставления случайных входных данных с целью сломать приложение. Бывают случаи, когда некоторые ошибки трудно выявить традиционными способами тестирования. Предоставление случайных входных данных повышает вероятность обнаружения таких ошибок.
При Gorilla testing берется каждый крошечный кусочек кода и тщательно тестируется с использованием случайных входных данных до тех пор, пока он не разрушится. Этот шаг выполняется для каждого модуля в приложении, чтобы проверить его надежность. Из-за такого жестокого характера тестирования его также называют тестированием на пытки или тестированием на отказоустойчивость. Обычно оно проводится на последних этапах цикла разработки программного обеспечения, чтобы убедиться, что все модули приложения работают так, как ожидалось.
Что такое Дымовые (Smoke)/Ре-тест (Re-test)/ Санити (Sanity)/Регрессионное (Regression) тестирование?


Смоук-тестирование (новая сборка) — это минимальный набор тестов, который проверяет основные функции системы или компонента. Задача – проверить, работает ли система в общих чертах, без детальной проверки.


Re-test — это процесс повторного тестирования той же функциональности после исправления дефекта, чтобы убедиться, что проблема действительно решена.


Sanity testing (санитарное тестирование, коррективы в текущей сборке) — это тип тестирования, который выполняется для проверки того, что определенные функции или изменения в программном обеспечении работают как ожидается после внесения изменений, таких как исправления ошибок или обновления. Основная цель санитарного тестирования — быстро определить, не нарушили ли внесенные изменения основные функции приложения.


Regression Testing (регрессионное тестирование) — это процесс повторного тестирования программного обеспечения после изменений, таких как добавление новой функции, исправление ошибок или обновление системы. Основная цель — убедиться, что изменения не нарушили работу уже существующего функционала. Как описано в ISTQB, регрессионное тестирование направлено на проверку того, что модификации в ПО не привели к появлению новых дефектов.

Smoke Testing (новая сборка): тестирование, которое проводится после выпуска каждой сборки. 
* Beta/Usability Testing: предварительная версия продукта демонстрируется реальному пользователю, и они тестируют продукт. 
* End to end testing: это форма тестирования, которая проверяет работоспособность программного продукта от начала до конца, воссоздавая реальные сценарии использования и проверяя взаимодействие между различными компонентами системы. 
* Patch testing (Тестирование  обновлений): проводится в случае, если изменения     предоставляются в виде патча или обновления. Проверяется его корректность и стабильность. Основной целью является проверка, что обновления устанавливаются без сбоев и не ведут к нежелательным побочным эффектам и багам.


Что такое Тестирование нового функционала/ Приемочное тестирование?


Тестирование нового функционала – процесс проверки нового, добавляемого функционала ПО на соответствие предъявляемым к нему требованиям.


Цели
* Минимизация рисков, связанных с наличием дефектов в работе новой функциональности программного обеспечения путем своевременного обнаружения этих дефектов в ходе тестирования.
Результаты
* Информация о степени соответствия функциональности разработанного продукта требованиям, заявленным в документации.
* Информация о количестве дефектов во внедряемой функциональности и их критичности для работоспособности системы.
* Список дефектов с описанием проблем и способов их воспроизведения.


New Feature Testing (тестирование новых функций) — это процесс проверки и валидации новых функций или возможностей, добавленных в программное обеспечение. Цель этого тестирования — убедиться, что новые функции работают как задумано и соответствуют требованиям, прежде чем они будут выпущены пользователям. Цель: Проверка функциональности, производительности и совместимости новых функций с существующей системой.


Приёмочное тестирование — это метод функционального тестирования программного обеспечения, при котором система проверяется на соответствие техническим и бизнес требованиям. Основная цель этого теста — оценить качество продукта и установить, можно ли делать релиз или нет.
Что такое Ручное/Автоматизированное,  Полуавтоматизированное тестирование?


Ручное тестирование (manual testing)  — часть процесса тестирования на этапе контроля качества в процессе разработки программного обеспечения. Оно производится тестировщиком без использования программных средств, для проверки программы или сайта путём моделирования действий пользователя. В роли тестировщиков могут выступать и обычные пользователи, сообщая разработчикам о найденных ошибках.


Автоматизированное тестирование (automated testing, test automation) - набор техник, подходов и инструментальных средств, позволяющий исключить человека из выполнения некоторых задач в процессе тестирования.


Полуавтоматизированное тестирование - это ручное тестирование с частичным использованием средств автоматизации (например автоматизация развертки окружения, автоматизация подготовки предусловий и т. д.).11 дек. 2022 г.


На основании чего происходит разработка тестовых сценариев?


* Тестирование на основе требований (Requirements-Based Testing)
Тестирование на основе требований ориентировано на проверку соответствия программного обеспечения формализованным требованиям, предъявленным к нему. Этот вид тестирования направлен на проверку того, что каждая функциональность, описанная в спецификации требований, была реализована правильно и соответствует ожиданиям.
 
* Тестирование по вариантам использования (Use Case Testing)
Тестирование по вариантам использования ориентировано на проверку того, как система будет использоваться пользователями. Оно включает разработку сценариев на основе реальных случаев использования системы (use cases), описывающих последовательность действий, выполняемых пользователем для достижения определенной цели.
 
* Тестирование на основе моделей (Model-Based Testing)
Тестирование на основе моделей использует модели системы для генерации тестовых сценариев. Эти модели могут представлять собой диаграммы состояний, диаграммы потоков данных или другие формальные описания поведения системы.
Что такое Frontend / Backend?
Frontend — это процесс создания пользовательского интерфейса и функциональности сайтов на стороне клиента. Фронтендом можно считать всё то, что что видит пользователь во время серфинга по страницам веб-ресурса, а также всё, с чем он взаимодействует: кнопки, ссылки, формы обратной связи, онлайн-чат и т. д.


Backend‑разработка — это совокупность программных и аппаратных инструментов для создания логики действий между элементами в вебе. Увы и ах, но эту работу пользователи не видят, потому что она ведется не на клиентской, а на серверной стороне.