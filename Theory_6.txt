Задание №6
* Требования - это что?
* Для чего нужен Анализ требований в разработке программного обеспечения?
* Перечислите Виды требований
* Перечислите Функциональные уровни требований
* Перечислите Нефункциональные уровни требований
* Перечислите техники сбора требований
* Что такое Спецификация требований программного обеспечения (SRS)?
* Что такое Use Case?
* Приведите пример Use Case
* Перечислите Характеристики качества требований
* Приведите пример к каждой Характеристике качества требований
* Что такое Пользовательские истории(User story)?
* Приведите пример Пользовательских историй(User story)
* Какие преимущества и недостатки Пользовательских историй(User story)?
* Что такое Критерии приемки(Acceptance criteria)?
* Перечислите виды и форматы критерий приемки
* Приведите пример критерий приемки- список правил
* Приведите пример критерий приемки- поведенческий сценарий
* Перечислите критерии INVEST для User story
* Что такое эстимирование?
* Перечислите Принципы эстимирования
* Какие техники оценивания разработки программного обеспечения вы знаете?
* Приведите пример Процесса оценки по каждой технике эстимирования
* Что такое Риск(Risks)?






Требования - это что?
Требования представляют собой детальные описания того, что система должна выполнять, как она должна функционировать и какими характеристиками должна обладать. Они служат основой для проектирования, разработки, тестирования и внедрения ПО, обеспечивая общее понимание между всеми заинтересованными сторонами проекта (разработчиками, клиентами, пользователями, менеджерами и т.д.).
Спецификация требований к ПО является основным документом, определяющим план разработки ПО.


Хороший набор требований удовлетворяет следующим показателям качества (IEEE 830-1998 «Recommended Practice for Software Requirements Specifications»):


* Корректность или адекватность (соответствие реальным потребностям).
* Недвусмысленность (однозначность понимания).
* Полнота (отражение всех выделенных потребностей и всех возможных ситуаций, в которых придется работать системе).
* Непротиворечивость (согласованность между различными элементами).
* Упорядоченность по приоритету и стабильности.
* Проверяемость (выполнение каждого требования нужно должно проверяться достаточно эффективным способом - непроверяемые требования должны быть удалены из рассмотрения или сведены к проверяемым вариантам).
* Модифицируемость (оформление в удобных для внесения изменений структуре и стилях).
* Прослеживаемость в ходе разработки (возможность увязать требование с подсистемами, модулями и операциями, ответственными за его выполнение, и с тестами, проверяющими его выполнение).


Для чего нужен Анализ требований в разработке программного обеспечения?
Анализ требований - это процесс выявления, определения и документирования требований к программной системе. Цель анализа требований - определить потребности пользователей и перевести их в конкретные, измеримые и достижимые требования, которые команда разработчиков программного обеспечения может использовать для проектирования и разработки системы. Этот процесс также известен как разработка требований, и он является важнейшим этапом жизненного цикла разработки программного обеспечения (SDLC), поскольку помогает убедиться, что  конечный продукт отвечает потребностям заинтересованных сторон и пользователей.


Анализ требований включает в себя несколько видов деятельности, таких как 
* сбор требований от заинтересованных сторон
* документирование и организация требований
* проверка требований и создание документа с описанием требований. 




Для сбора и анализа требований в процессе разработки программного обеспечения могут использоваться различные методы.
* Интервью;
* Опросы;
* Семинары;
* Прототипирование;
* Анализ сценариев использования;
* Нотация моделирования бизнес-процессов (BPMN); 
* Унифицированный язык моделирования (UML);
* Техника блок-схем;
* Диаграмма потока данных;
* Анализ пробелов.


Перечислите Виды требований
* Функциональные требования – они определяют именно функции и возможности, которыми должен обладать продукт. 
* Нефункциональные требования – это характеристики конкретной системы: безопасность, совместимость, производительность и т.д.


Также можно разделить требования на 3 категории:
* Явные – базовый тип требований. Это то, что клиент передает специалистам в виде документации с описанием каркаса ПО, критериев приема, спецификации дизайна. Иногда эти требования могут быть переданы в частной переписке, маркетинговых инструментах и т.д.;
* Неявные – это то, что клиент хочет видеть, но не упоминает, полагаясь на профессионализм разработчиков. Сюда могут входить производительность, доступность, безопасность и другие параметры. Неявные требования должны быть в тестировании обязательно, чтобы обеспечить нефункциональный компонент продукта;
* Скрытые – то, что клиент не ожидает увидеть/не знает о таких возможностях, но это может быть использовано для увеличения конкурентоспособности продукта, модернизации. Например, это различные анимации, мелкие функции, заполняющие пустые пространства.


Перечислите Функциональные уровни требований
1. Бизнес-требования.  Выражают цель, ради которой разрабатывается продукт (зачем вообще он нужен, какая от него ожидается польза, как заказчик с его помощью будет получать прибыль).  Пример: промо-сайт, привлекающий внимание определенной аудитории к определенной продукции компании.
2. Пользовательские требования описывают задачи, которые пользователь может выполнять с помощью разрабатываемой системы (реакцию системы на действия пользователя, сценарии работы пользователя). Пользовательские требования оформляются в виде вариантов использования (use cases), пользовательских историй (user stories), пользовательских сценариев (user scenarios). Пример: при первом сохранении новой статьи система должна выдавать запрос на сохранение в виде черновика или публикацию.
3. Функциональные требования – определяют функциональность (поведение) программной системы, которая должна быть создана разработчиками для предоставления возможности выполнения пользователями своих обязанностей в рамках бизнес-требований и в контексте пользовательских требований. Пример: система должна автоматически выполнять резервное копирование данных ежедневно в указанный момент времени.
4. В группу функциональных требований относят и Системные требования. Эти характеристики могут описывать требования как к аппаратному обеспечению (тип и частота процессора, объем оперативной памяти, объём жёсткого диска), так и к программному окружению (операционная система, наличие установленных системных компонентов и сервисов и т. п.). Обычно такие требования составляются производителем или автором ПО. Например, для игры это могут быть требования такого типа: видеокарта — объем памяти от 64 Мб, совместимость с DirectX 9.0b и новейшие драйвера. Для сайта: ОС — Windows не ниже XP, браузеры IE не ниже 7.0 и так далее.


Перечислите Нефункциональные уровни требований


Перечислите техники сбора требований
Сбор требований – это важный процесс на начальных этапах разработки продукта. Он включает в себя выявление, документирование и анализ ожиданий и потребностей клиентов и заинтересованных сторон.


Цель: Обеспечить четкое понимание того, что нужно создать, как это должно работать и какими характеристиками должен обладать продукт.


1. Интервью - личное общение с клиентами и заинтересованными сторонами позволяет глубже понять потребности и ожидания
2. Опросы - анкеты и опросники позволяют собрать информацию от большого количества людей.
3. Мозговой штурм - групповой метод генерации идей все участники предлагают идеи по сбору требований.
4. Прототипирование - создание упрощенной версии продукта для демонстрации функционала.
5. Наблюдение - анализ работы пользователей в реальной среде.
6. Анализ документов -  изучение существующих документов, таких как технические спецификации, бизнес-планы и прошлые отчеты.
Что такое Спецификация требований программного обеспечения (SRS)?
Software Requirements Specification – документ, содержащий полное описание поведения разрабатываемой системы, включающее функциональные и нефункциональные требования.


SRS начинает писаться практически в самом начале проекта, когда появляются первые требования. Далее на протяжении всего ЖЦ проекта по мере извлечения и уточнения требований SRS обновляется


НА ОСНОВАНИИ ЧЕГО ПИШЕТСЯ SRS?
* Протоколы встреч
* Vision & Scope
* Эскизы UI
* Таблицы
* Диаграммы


ДЛЯ КОГО ПИШЕТСЯ SRS?
* Заказчик 
* Разработчики
* Тестировщики
* Аналитики 
* Руководитель проекта


Что такое Use Case?
Use case (в переводе с англ. «вариант использования») — это документ, который описывает, какие действия выполняет пользователь и как система должна на них реагировать. 


С помощью Use Case может описываться взаимодействие двух или большего количества участников, имеющее конкретную цель:
*  покупка товара в магазине (Покупатель-Продавец),
*  отправка письма по электронной почте (Адресант-Почтовый клиент),
*  запрос страницы браузером (Браузер-Web-сервер).
Приведите пример Use Case
Пример простейшего use case - пользователь заполнил поля формы, а система должна сохранить.
Перечислите Характеристики качества требований
Приведите пример к каждой Характеристике качества требований
1. ПОЛНОТА (или "завершенность").
Каждое требование должно содержать всю информацию, необходимую для его понимания, не оставлять пробелов или недомолвок. Этот критерий относится и к бизнес- и к техническим требованиям.
2. НЕПРОТИВОРЕЧИВОСТЬ (или "согласованность").
Требования не должны противоречить друг другу. Обнаружение несоответствий может быть крайне затруднительным, если требования к одной и той же функциональности продукта находятся в разных местах.
3. НЕДВУСМЫСЛЕННОСТЬ (или "однозначность").
Русский язык, как и любой другой, может содержать двусмысленности, которые обычно проявляются в двух формах: когда одно требование можно интерпретировать по-разному и когда разные люди понимают одно и то же требование по-своему. Тестирование требований помогает выявить такие проблемы, хотя полностью исключить двусмысленность невозможно. Важно, чтобы требования были сформулированы однозначно, без жаргона, аббревиатур и неясных фраз, чтобы не возникало различных трактовок.
4. КОРРЕКТНОСТЬ.
Под корректностью понимается точное соответствие запросам пользователей и бизнеса. Это означает, что требования должны полностью удовлетворять нужды заинтересованных сторон, которые будут использовать эти требования для достижения конкретных целей.
5. ВЫПОЛНИМОСТЬ (или "осуществимость").
Выполнимость требований в проекте определяется их возможностью быть реализованными с учетом технических, бюджетных и временных ограничений. Для оценки выполнимости можно использовать инкрементальную разработку и прототипы. Если требование невозможно выполнить, важно учитывать его влияние на проект и принимать решения о его исключении.
6. ПРОВЕРЯЕМОСТЬ (или "тестируемость").
Тестируемость требований означает их способность быть проверенными через объективные тест-кейсы, которые ясно показывают правильность реализации. Неполные, несогласованные или двусмысленные требования не поддаются проверке.
7. ПРИОРИТИЗИРОВАННОСТЬ (или "упорядоченность").
Требования должны быть упорядочены по важности, стабильности и срочности. Важность определяет, насколько успех проекта зависит от выполнения требования; стабильность показывает, насколько вероятность изменений в требовании мала; срочность влияет на распределение усилий команды по времени. Неверно расставленные приоритеты могут привести к неэффективному распределению ресурсов, выполнению ненужной работы и нарушению сроков.
Также выделяют ещё:
Атомарность (или "единичность"). Каждое требование должно быть самодостаточным и описывать только одну ситуацию. Если требование можно разбить на несколько независимых, оно перестаёт быть атомарным. Проблемы с атомарностью возникают, когда в одном требовании описываются разные элементы интерфейса или разные состояния/эффекты от действий пользователя, что затрудняет его понимание и приводит к путанице.
Необходимость (или "обязательность"). Каждое требование должно приносить реальную пользу бизнесу, выделять продукт на рынке или обеспечивать соблюдение стандартов и правил. Если какое-то требование устарело, было замещено другим или просто не обязательно для реализации, его необходимо удалить из набора требований.
Прослеживаемость (или "трассируемость"). Требования должны быть оформлены в структурированном виде и, в идеале, иметь уникальные идентификаторы. В контексте тестирования прослеживаемые (или "трассируемые") требования — это те, которые удобно связать с тестами. Для этого используются матрицы трассировки.
Модифицируемость. Модифицируемость требований подразумевает легкость их изменения. Если требования к продукту разбросаны по разным хранилищам или одно и то же требование встречается в нескольких местах, это значительно усложняет их изменение. Хранение требований в единой базе и использование уникальных идентификаторов помогают избежать избыточности и облегчить управление изменениями.
Понятность. Понятность определяется тем, насколько легко требования понимает целевая аудитория. Требования должны быть написаны с использованием терминологии, знакомой всем членам команды, которая их использует в работе. Это позволит избежать недоразумений и неправильной интерпретации. Если требования описаны неясно или с использованием специального жаргона, который не является общепринятым, это усложняет их понимание, выполнение и замедляет онбординг новых сотрудников.
Что такое Пользовательские истории (User story)?
это требование для любой функциональности или фичи, которое записано в 1-2 строки. Пользовательская история обычно является самым простым из возможных требований и касается одной-единственной функции/фичи.


Как /роль пользователя или клиента/, я хочу /цель, которую нужно достичь/, чтобы я мог /причина цели/.
Приведите пример Пользовательских историй (User story)
“Как пользователь WhatsApp, я хочу, чтобы значок камеры в поле ввода чата позволял захватывать и отправлять изображения, чтобы я мог сделать фото и поделиться им одновременно со всеми своими друзьями.”


Какие преимущества и недостатки Пользовательских историй (User story)?
ПРЕИМУЩЕСТВА


Сосредоточенность на пользователе
Пример: История "Как пользователь, я хочу иметь возможность фильтровать товары по цене, чтобы быстро находить подходящие мне варианты". Это помогает команде сосредоточиться на том, что важно для пользователя.


Простота и ясность
Пример: История "Как администратор, я хочу видеть список всех пользователей, чтобы управлять их доступом". Пользовательские истории элементарны и легко понимаемы, что облегчает общение между разработчиками и заинтересованными сторонами.


Гибкость и адаптивность
Пример: История "Как турист, я хочу, чтобы приложение показывало мне текущую погоду в моем месте назначения, чтобы я мог подготовиться к поездке". Легко адаптировать или изменить в ответ на новые требования или отзывы пользователей.


Упрощение приоритизации
Пример: Если у нас есть истории о поиске и фильтрации, команда может решить, что фильтрация по цене важнее, чем сортировка по популярности, исходя из потребностей пользователей.


Поддержка разработки поэтапно
Пример: История "Как пользователь, я хочу иметь возможность восстанавливать забытый пароль". Такой подход позволяет разбить большие задачи на более мелкие, подходящие для Agile-разработки.










НЕДОСТАТКИ


Неполнота требований
Пример: На раннем этапе может быть упущена важная деталь, например, "Как пользователь, я хочу видеть результаты поиска только на английском языке". Это может вызвать недоразумения в разработке.


Сложности с формулировкой
Пример: Если команда не умеет хорошо формулировать пользовательские истории, это может привести к неопределенности. Например, "Как пользователь, я хочу отзывы" может быть слишком размытым без указания контекста (в каком разделе, в каком формате и т. д.).


Игнорирование технических аспектов
Пример: Пользовательская история "Как покупатель, я хочу легко добавлять товары в корзину" может игнорировать необходимость интеграции с платежной системой и вопросами безопасности.


Отсутствие метрик для оценки
Пример: История "Как администратор, я хочу, чтобы система работала быстрее" не дает количественных критериев, по которым можно было бы оценить, что значит "быстрее".


Трудности с масштабированием
Пример: Если проект становится слишком большим и сложным, управление историей может стать трудоемким, и это может привести к трудностям в отслеживании прогресса.


Что такое Критерии приемки (Acceptance criteria)?
Критерии приемки - это набор условий, которые должны быть выполнены, чтобы задача или user story считались завершенными с точки зрения конечного пользователя.


Проще говоря,  это список деталей (также известных как требования) о том, как новая функция (feature) программного обеспечения должна работать/выглядеть.


Это гарантирует, что:
* Функция разработана хорошо. 
* Это работает так, как было задумано. 
* QA знает, чего ожидать во время тестирования. 


Хорошие критерии приемки должны быть простыми для понимания, но с достаточной детализацией, чтобы убедиться, что они не слишком расплывчаты.


Цели приемки
* Детализация области функциональности. Критерии приемки определяют границы пользовательских историй. 
* Описание негативных сценариев. Критерии приемки могут потребовать от системы распознавать небезопасные пароли и предотвратить дальнейшие действия пользователя. 
* Настройка коммуникации. Критерии приемки согласовывают видения клиента и команды разработчиков. Они гарантируют, что все имеют единое понимание требований. 
* Оптимизация приемочного тестирования. Критерии приемки являются основой приемочного тестирования пользовательских историй. Каждый критерий приемки должен быть независимо тестируемым и иметь четкие сценарии прохождения или провала. 
* Проведение оценки фич. Критерии приемки указывают, что именно должна разработать команда. Определенные требования позволяют команде разбить пользовательские истории на задачи, которые могут быть корректно оценены.
Перечислите виды и форматы критерий приемки
В зависимости от начальной задачи и сложности требований, критерии приемки могут быть записаны в различных форматах, а именно: 
* ориентированные на сценарий (рис.1)  - тип критериев приемки, который описывается в форме сценария и иллюстрирует каждый критерий. Он рассматривается через последовательность Given/When/Then (GWT) – Дано/Когда/Тогда;
* ориентированные на правила - форма, ориентированная на правила, предполагает наличие набора правил, описывающих поведение системы. На основе этих правил можно составить конкретные сценарии. Обычно, критерии, составленные с использованием этой формы, выглядят как простой список маркеров (рис.2) или шаблон чеклиста.
* пользовательские форматы (рис.3) - при использовании собственных критериев приемки, при условии, что они служат своей цели, четко написаны на понятном языке и не могут быть неправильно истолкованы. 


Готовые шаблоны критериев приемки:
* Klariti 
* Aha!
* PowerSlides 
* Stakeholder Map


Приведите пример критерий приемки- список правил
User-story
* Как пользователь
* Я хочу искать товар в пределах установленного диапазона стоимости
* Чтобы найти подходящие мне товары в моей ценовой категории


Приведите пример критерий приемки- поведенческий сценарий
User story: КАК пользователь, Я хочу иметь возможность восстановить пароль от своей учетной записи, ЧТОБЫ в случае, если я забыл пароль, я мог получить доступ к своей учетной записи


Сценарий: Забыт пароль 


Дано - пользователь переходит на страницу входа  
Когда - пользователь выбирает опцию <забыл пароль>  
И: Вводит действительный адрес электронной почты для получения ссылки на восстановление пароля  
Тогда - система отправляет ссылку на указанный адрес электронной почты  
Дано - пользователь получает ссылку через электронную почту  
Когда - пользователь переходит по полученной ссылке в электронной почте  
Тогда - система позволяет пользователю установить новый пароль 
Перечислите критерии INVEST для User story
INVEST — это акроним, который помогает оценить качество пользовательских историй (user stories) в гибкой разработке (Agile). Он включает шесть критериев, которые помогают сформулировать задачи так, чтобы они были понятными, выполнимыми и полезными для команды разработки.
* I — Independent (Независимая): История должна быть автономной и не зависеть от других историй. Это позволяет планировать и выполнять её отдельно, минимизируя блокировки.
* N — Negotiable (Обсуждаемая): История — это не контракт, а приглашение к обсуждению. Её детали могут уточняться в ходе взаимодействия с командой и заказчиком.
* V — Valuable (Ценная): История должна приносить ценность конечному пользователю или бизнесу. Это помогает сфокусироваться на задачах, которые действительно важны.
* E — Estimable (Оцениваемая): История должна быть понятной и достаточной для оценки её сложности и ресурсов на выполнение.
* S — Small (Компактная): История должна быть достаточно маленькой, чтобы её можно было реализовать за один спринт (обычно не более недели).
* T — Testable (Тестируемая): История должна быть формулируема таким образом, чтобы можно было проверить её выполнение с точки зрения требований.
Что такое эстимирование?
Эстимирование (оценка трудозатрат) в разработке программного обеспечения — это процесс определения времени и ресурсов, необходимых для выполнения задачи или проекта.
Перечислите Принципы эстимирования
1. **Четкость целей и требований**: Для точной оценки необходимо иметь ясное понимание целей проекта и требований. Если требования неясны или изменчивы, оценки могут быть неточными.


2. **Опыт и знания**: Использование знаний и опыта команды важно для более точной оценки. Чем больше информации о предыдущих проектах и аналогичных задачах, тем лучше.


3. **Разбиение на подзадачи**: Разделение больших задач на более мелкие и управляемые подзадачи позволяет улучшить точность оценок и упростить оценку времени на выполнение каждой части.


4. **Использование исторических данных**: Опора на предыдущие оценки и фактические затраты помогает создать более реалистичные и обоснованные оценки.


5. **Учет рисков и неопределенностей**: Важно осознавать, что не все аспекты проекта можно предсказать. Учет рисков и неопределенностей, а также резервирование времени под них может повысить точность оценки.


6. **Ретроспективный анализ**: После завершения проекта полезно проводить обзор оценок и фактических затрат, чтобы выявить несоответствия и улучшить будущие оценки.


7. **Участие всех заинтересованных сторон**: Вовлечение разработчиков, тестировщиков и других членов команды в процесс оценки способствует учету различных точек зрения и усиливает обязательство к соблюдению оценок.


8. **Применение множества методов оценки**: Использование различных подходов, таких как экспертные оценки, метод триангуляции, Planning Poker, а также аналоговые и параметрические методы, может привести к более точным оценкам.


9. **Итеративный подход**: Оценка может быть уточнена на протяжении всего процесса разработки. Итеративный подход позволяет вносить изменения в оценки по мере развития проекта и появления новых данных.


10. **Коммуникация и прозрачность**: Четкая коммуникация между участниками проекта о процессе оценки и ее результатах помогает установить реалистичные ожидания и избежать недоразумений.


Какие техники оценивания разработки программного обеспечения вы знаете?
1. Пальцем в небо - оценка строится на предположении и внутренних ощущениях тестировщика
2. Оценка на основе опыта - у нас есть предыдущий опыт, к примеру, прошедшая итерация. Этот метод самый быстрый, а при наличии определенной истории эстимаций и опыта еще и самый точный. Он хорошо подойдет командам, которые работают вместе уже некоторое время и прекрасно знают свои силы и слабости.
3. Метод декомпозиции - способ оценки времени разработки программного продукта, при котором проект разбивается на более мелкие задачи или модули, которые затем оцениваются по отдельности. Чаще всего этот метод самый затратный по времени и усилиям, но дает самые точные результаты. Практически все задачи можно свести к примерно одним и тем же этапам: составление требований, дизайн, девелопмент, деплоймент, тестирование…
4. Эстимация на основе разработки - мы знаем, сколько времени потратят на разработку и имплементацию наши девелоперы и в зависимости от этого, делаем предположение: сколько мы можем потратить времени на тестирование?
* Эстимация на основе тест-кейсов предполагает расчет времени тестировщика на его активности: составление и запуск тест-кейсов, оформление баг-репортов, ретесты, дополнительное время (митинги, коммуникация) + риски.
Конечное число и будет тем временем, которое мы потратим на наше тестирование.
* Эстимация по трем точкам предполагает установку трех временных точек: оптимистичное, пессимистичное и среднее время, потраченное на тестирование.
Согласно формуле происходит расчет, находится стандартное отклонение и финальная эстимация заносится в необходимый документ. Эстимация по трем точкам предполагает предварительный расчет, аналогичный оценке на основе тест-кейсов.
5. Метод процентного распределения - это метод оценки, который учитывает вероятностное распределение для времени выполнения задачи. Путем назначения вероятностей различным временным периодам и усреднения этих значений можно получить более реалистичную оценку времени, необходимого для завершения задачи. Этот метод помогает учесть различные сценарии и неопределенности, которые могут возникнуть в процессе выполнения задачи.
6. Planning Poker  (покер планнинг) - популярный метод оценки времени и сложности задач в Agile-подходах к управлению проектами. В этом методе команда разработчиков собирается вместе, чтобы коллективно оценить задачи или пользовательские истории, используя карты с числами, обозначающими временные рамки или сложность задачи.
7. T-Shirt Sizing (метод оценки по рубашкам) - метод, используемый в агильной разработке ПО для оценки задач по их относительной сложности или объему работы. Вместо числовых значений, как в методе Planning Poker, участники команды используют размеры футболок (XS, S, M, L, XL) или другие аналогии, чтобы оценить сложность задачи. Каждая задача или элемент работы присваивается одному из размеров, который наиболее точно отражает сложность или объем работы. Этот метод помогает команде быстро оценить задачи относительно друг друга, без необходимости точного числового измерения.
8. Экспертная оценка - для эстимирования необходимо привлекать экспертов в данной области, имеющих опыт в выполнении оценок. 




Приведите пример Процесса оценки по каждой технике эстимирования


Что такое Риск(Risks)?
Риски   — это возможные проблемы, которые могут возникнуть в ходе разработки или использования продукта, приводя их дефектам. 
* Проектные риски
* Технические риски
* Риски качества
* Организационные риски